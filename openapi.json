{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.15.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/auth/aws/config/certificate/{cert_name}": {
      "description": "Adds the AWS Public Key that is used to verify the PKCS#7 signature of the identity document.",
      "parameters": [
        {
          "name": "cert_name",
          "description": "Name of the certificate.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-certificate-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-certificate",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureCertificateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-certificate-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/config/certificates/": {
      "description": "Lists all the AWS public certificates that are registered with the backend.",
      "get": {
        "operationId": "aws-list-certificate-configurations",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/config/client": {
      "description": "Configure AWS IAM credentials that are used to query instance and role details from the AWS API.",
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-client-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-client",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-client-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/config/identity": {
      "description": "Configure the way the AWS auth method interacts with the identity store",
      "get": {
        "operationId": "aws-read-identity-integration-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-identity-integration",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureIdentityIntegrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/config/rotate-root": {
      "description": "Request to rotate the AWS credentials used by Vault",
      "post": {
        "operationId": "aws-rotate-root-credentials",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/config/sts/": {
      "description": "List all the AWS account/STS role relationships registered with Vault.",
      "get": {
        "operationId": "aws-list-sts-role-relationships",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/config/sts/{account_id}": {
      "description": "Specify STS roles to be assumed for certain AWS accounts.",
      "parameters": [
        {
          "name": "account_id",
          "description": "AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-sts-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-write-sts-role",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsWriteStsRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-sts-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/config/tidy/identity-accesslist": {
      "description": "Configures the periodic tidying operation of the access list identity entries.",
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-identity-access-list-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-identity-access-list-tidy-operation",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureIdentityAccessListTidyOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-identity-access-list-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/config/tidy/identity-whitelist": {
      "description": "Configures the periodic tidying operation of the access list identity entries.",
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-identity-whitelist-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-identity-whitelist-tidy-operation",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureIdentityWhitelistTidyOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-identity-whitelist-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/config/tidy/roletag-blacklist": {
      "description": "Configures the periodic tidying operation of the deny listed role tag entries.",
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-role-tag-blacklist-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-role-tag-blacklist-tidy-operation",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureRoleTagBlacklistTidyOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-role-tag-blacklist-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/config/tidy/roletag-denylist": {
      "description": "Configures the periodic tidying operation of the deny listed role tag entries.",
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-role-tag-deny-list-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-configure-role-tag-deny-list-tidy-operation",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsConfigureRoleTagDenyListTidyOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-role-tag-deny-list-tidy-settings",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/identity-accesslist/": {
      "description": "Lists the items present in the identity access list.",
      "get": {
        "operationId": "aws-list-identity-access-list",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/identity-accesslist/{instance_id}": {
      "description": "Read or delete entries in the identity access list.",
      "parameters": [
        {
          "name": "instance_id",
          "description": "EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "aws-read-identity-access-list",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-identity-access-list",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/identity-whitelist/": {
      "description": "Lists the items present in the identity access list.",
      "get": {
        "operationId": "aws-list-identity-whitelist",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/identity-whitelist/{instance_id}": {
      "description": "Read or delete entries in the identity access list.",
      "parameters": [
        {
          "name": "instance_id",
          "description": "EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "aws-read-identity-whitelist",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-identity-whitelist",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/login": {
      "description": "Authenticates an EC2 instance with Vault.",
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "aws-login",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/role/": {
      "description": "Lists all the roles that are registered with Vault.",
      "get": {
        "operationId": "aws-list-auth-roles",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/role/{role}": {
      "description": "Create a role and associate policies to it.",
      "parameters": [
        {
          "name": "role",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "aws-read-auth-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-write-auth-role",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsWriteAuthRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-auth-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/role/{role}/tag": {
      "description": "Create a tag on a role in order to be able to further restrict the capabilities of a role.",
      "parameters": [
        {
          "name": "role",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "aws-write-role-tag",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsWriteRoleTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/roles/": {
      "description": "Lists all the roles that are registered with Vault.",
      "get": {
        "operationId": "aws-list-auth-roles2",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/roletag-blacklist/": {
      "description": "Lists the deny list role tags.",
      "get": {
        "operationId": "aws-list-role-tag-blacklists",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/roletag-blacklist/{role_tag}": {
      "description": "Blacklist a previously created role tag.",
      "parameters": [
        {
          "name": "role_tag",
          "description": "Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "aws-read-role-tag-blacklist",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-write-role-tag-blacklist",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-role-tag-blacklist",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/roletag-denylist/": {
      "description": "Lists the deny list role tags.",
      "get": {
        "operationId": "aws-list-role-tag-deny-lists",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/aws/roletag-denylist/{role_tag}": {
      "description": "Blacklist a previously created role tag.",
      "parameters": [
        {
          "name": "role_tag",
          "description": "Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "aws-read-role-tag-deny-list",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "aws-write-role-tag-deny-list",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "aws-delete-role-tag-deny-list",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/aws/tidy/identity-accesslist": {
      "description": "Clean-up the access list instance identity entries.",
      "post": {
        "operationId": "aws-tidy-identity-access-list",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsTidyIdentityAccessListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/tidy/identity-whitelist": {
      "description": "Clean-up the access list instance identity entries.",
      "post": {
        "operationId": "aws-tidy-identity-whitelist",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsTidyIdentityWhitelistRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/tidy/roletag-blacklist": {
      "description": "Clean-up the deny list role tag entries.",
      "post": {
        "operationId": "aws-tidy-role-tag-blacklist",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsTidyRoleTagBlacklistRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/aws/tidy/roletag-denylist": {
      "description": "Clean-up the deny list role tag entries.",
      "post": {
        "operationId": "aws-tidy-role-tag-deny-list",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwsTidyRoleTagDenyListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/ldap/config": {
      "description": "Configure the LDAP server to connect to, along with its options.",
      "x-vault-displayAttrs": {
        "action": "Configure"
      },
      "get": {
        "operationId": "ldap-read-auth-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "ldap-configure-auth",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapConfigureAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/ldap/groups/": {
      "description": "Manage additional groups for users allowed to authenticate.",
      "x-vault-displayAttrs": {
        "navigation": true,
        "itemType": "Group"
      },
      "get": {
        "summary": "Manage additional groups for users allowed to authenticate.",
        "operationId": "ldap-list-groups",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/ldap/groups/{name}": {
      "description": "Manage additional groups for users allowed to authenticate.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the LDAP group.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-displayAttrs": {
        "itemType": "Group",
        "action": "Create"
      },
      "get": {
        "summary": "Manage additional groups for users allowed to authenticate.",
        "operationId": "ldap-read-group",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage additional groups for users allowed to authenticate.",
        "operationId": "ldap-write-group",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapWriteGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage additional groups for users allowed to authenticate.",
        "operationId": "ldap-delete-group",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/ldap/login/{username}": {
      "description": "Log in with a username and password.",
      "parameters": [
        {
          "name": "username",
          "description": "DN (distinguished name) to be used for login.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Log in with a username and password.",
        "operationId": "ldap-login",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/ldap/users/": {
      "description": "Manage users allowed to authenticate.",
      "x-vault-displayAttrs": {
        "navigation": true,
        "itemType": "User"
      },
      "get": {
        "summary": "Manage users allowed to authenticate.",
        "operationId": "ldap-list-users",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/ldap/users/{name}": {
      "description": "Manage users allowed to authenticate.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the LDAP user.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-displayAttrs": {
        "itemType": "User",
        "action": "Create"
      },
      "get": {
        "summary": "Manage users allowed to authenticate.",
        "operationId": "ldap-read-user",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage users allowed to authenticate.",
        "operationId": "ldap-write-user",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapWriteUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage users allowed to authenticate.",
        "operationId": "ldap-delete-user",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/oidc/config": {
      "description": "Configures the JWT authentication backend.",
      "get": {
        "summary": "Read the current JWT authentication backend configuration.",
        "operationId": "jwt-read-configuration",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configure the JWT authentication backend.",
        "description": "The JWT authentication backend validates JWTs (or OIDC) using the configured\ncredentials. If using OIDC Discovery, the URL must be provided, along\nwith (optionally) the CA cert to use for the connection. If performing JWT\nvalidation locally, a set of public keys must be provided.",
        "operationId": "jwt-configure",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/oidc/login": {
      "description": "Authenticates to Vault using a JWT (or OIDC) token.",
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Authenticates to Vault using a JWT (or OIDC) token.",
        "operationId": "jwt-login",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/oidc/oidc/auth_url": {
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Request an authorization URL to start an OIDC login flow.",
        "operationId": "jwt-oidc-request-authorization-url",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtOidcRequestAuthorizationUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/oidc/oidc/callback": {
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Callback endpoint to complete an OIDC login.",
        "operationId": "jwt-oidc-callback",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "client_nonce",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Callback endpoint to handle form_posts.",
        "operationId": "jwt-oidc-callback-form-post",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtOidcCallbackFormPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/oidc/role/": {
      "description": "Lists all the roles registered with the backend.",
      "get": {
        "summary": "Lists all the roles registered with the backend.",
        "description": "The list will contain the names of the roles.",
        "operationId": "jwt-list-roles",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/oidc/role/{name}": {
      "description": "Register an role with the backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Read an existing role.",
        "operationId": "jwt-read-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Register an role with the backend.",
        "description": "A role is required to authenticate with this backend. The role binds\n\t\tJWT token information with token policies and settings.\n\t\tThe bindings, token polices and token settings can all be configured\n\t\tusing this endpoint",
        "operationId": "jwt-write-role",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtWriteRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing role.",
        "operationId": "jwt-delete-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/token/accessors/": {
      "description": "List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires 'sudo' capability in addition to 'list'.",
      "x-vault-sudo": true,
      "get": {
        "summary": "List token accessors, which can then be\nbe used to iterate and discover their properties\nor revoke them. Because this can be used to\ncause a denial of service, this endpoint\nrequires 'sudo' capability in addition to\n'list'.",
        "operationId": "token-list-accessors",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token/create": {
      "description": "The token create path is used to create new tokens.",
      "post": {
        "summary": "The token create path is used to create new tokens.",
        "operationId": "token-create",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/create-orphan": {
      "description": "The token create path is used to create new orphan tokens.",
      "post": {
        "summary": "The token create path is used to create new orphan tokens.",
        "operationId": "token-create-orphan",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreateOrphanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/create/{role_name}": {
      "description": "This token create path is used to create new tokens adhering to the given role.",
      "parameters": [
        {
          "name": "role_name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "This token create path is used to create new tokens adhering to the given role.",
        "operationId": "token-create-against-role",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreateAgainstRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/lookup": {
      "description": "This endpoint will lookup a token and its properties.",
      "get": {
        "operationId": "token-look-up-2",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "token",
            "description": "Token to lookup",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "token-look-up",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenLookUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/lookup-accessor": {
      "description": "This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.",
      "post": {
        "summary": "This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.",
        "operationId": "token-look-up-accessor",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenLookUpAccessorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/lookup-self": {
      "description": "This endpoint will lookup a token and its properties.",
      "get": {
        "operationId": "token-look-up-self",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "token-look-up-self2",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenLookUpSelf2Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/renew": {
      "description": "This endpoint will renew the given token and prevent expiration.",
      "post": {
        "summary": "This endpoint will renew the given token and prevent expiration.",
        "operationId": "token-renew",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRenewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/renew-accessor": {
      "description": "This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.",
      "post": {
        "summary": "This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.",
        "operationId": "token-renew-accessor",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRenewAccessorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/renew-self": {
      "description": "This endpoint will renew the token used to call it and prevent expiration.",
      "post": {
        "summary": "This endpoint will renew the token used to call it and prevent expiration.",
        "operationId": "token-renew-self",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRenewSelfRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/revoke": {
      "description": "This endpoint will delete the given token and all of its child tokens.",
      "post": {
        "summary": "This endpoint will delete the given token and all of its child tokens.",
        "operationId": "token-revoke",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/revoke-accessor": {
      "description": "This endpoint will delete the token associated with the accessor and all of its child tokens.",
      "post": {
        "summary": "This endpoint will delete the token associated with the accessor and all of its child tokens.",
        "operationId": "token-revoke-accessor",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevokeAccessorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/revoke-orphan": {
      "description": "This endpoint will delete the token and orphan its child tokens.",
      "x-vault-sudo": true,
      "post": {
        "summary": "This endpoint will delete the token and orphan its child tokens.",
        "operationId": "token-revoke-orphan",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevokeOrphanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/revoke-self": {
      "description": "This endpoint will delete the token used to call it and all of its child tokens.",
      "post": {
        "summary": "This endpoint will delete the token used to call it and all of its child tokens.",
        "operationId": "token-revoke-self",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/token/roles/": {
      "description": "This endpoint lists configured roles.",
      "get": {
        "summary": "This endpoint lists configured roles.",
        "operationId": "token-list-roles",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token/roles/{role_name}": {
      "parameters": [
        {
          "name": "role_name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "token-read-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "token-write-role",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenWriteRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "token-delete-role",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/auth/token/tidy": {
      "description": "This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.",
      "post": {
        "summary": "This endpoint performs cleanup tasks that can be run if certain error\nconditions have occurred.",
        "operationId": "token-tidy",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cubbyhole/{path}": {
      "description": "Pass-through secret storage to a token-specific cubbyhole in the storage backend, allowing you to read/write arbitrary data into secret storage.",
      "parameters": [
        {
          "name": "path",
          "description": "Specifies the path of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Retrieve the secret at the specified location.",
        "operationId": "cubbyhole-read",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Store a secret at the specified location.",
        "operationId": "cubbyhole-write",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Deletes the secret at the specified location.",
        "operationId": "cubbyhole-delete",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/cubbyhole/{path}/": {
      "description": "Pass-through secret storage to a token-specific cubbyhole in the storage backend, allowing you to read/write arbitrary data into secret storage.",
      "parameters": [
        {
          "name": "path",
          "description": "Specifies the path of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "List secret entries at the specified location.",
        "description": "Folders are suffixed with /. The input must be a folder; list on a file will not return a value. The values themselves are not accessible via this command.",
        "operationId": "cubbyhole-list",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/database/config/": {
      "description": "Configure connection details to a database plugin.",
      "get": {
        "summary": "Configure connection details to a database plugin.",
        "operationId": "database-list-connections",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/database/config/{name}": {
      "description": "Configure connection details to a database plugin.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of this database connection",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "database-read-connection-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "database-configure-connection",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseConfigureConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "database-delete-connection-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/database/creds/{name}": {
      "description": "Request database credentials for a certain role.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Request database credentials for a certain role.",
        "operationId": "database-generate-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/database/reset/{name}": {
      "description": "Resets a database plugin.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of this database connection",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Resets a database plugin.",
        "operationId": "database-reset-connection",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/database/roles/": {
      "description": "Manage the roles that can be created with this backend.",
      "get": {
        "summary": "Manage the roles that can be created with this backend.",
        "operationId": "database-list-roles",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/database/roles/{name}": {
      "description": "Manage the roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Manage the roles that can be created with this backend.",
        "operationId": "database-read-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage the roles that can be created with this backend.",
        "operationId": "database-write-role",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseWriteRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage the roles that can be created with this backend.",
        "operationId": "database-delete-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/database/rotate-role/{name}": {
      "description": "Request to rotate the credentials for a static user account.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the static role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "database-rotate-static-role-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/database/rotate-root/{name}": {
      "description": "Request to rotate the root credentials for a certain database connection.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of this database connection",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "database-rotate-root-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/database/static-creds/{name}": {
      "description": "Request database credentials for a certain static role. These credentials are rotated periodically.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the static role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Request database credentials for a certain static role. These credentials are\nrotated periodically.",
        "operationId": "database-read-static-role-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/database/static-roles/": {
      "description": "Manage the static roles that can be created with this backend.",
      "get": {
        "summary": "Manage the static roles that can be created with this backend.",
        "operationId": "database-list-static-roles",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/database/static-roles/{name}": {
      "description": "Manage the static roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Manage the static roles that can be created with this backend.",
        "operationId": "database-read-static-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage the static roles that can be created with this backend.",
        "operationId": "database-write-static-role",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseWriteStaticRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage the static roles that can be created with this backend.",
        "operationId": "database-delete-static-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/alias": {
      "description": "Create a new alias.",
      "post": {
        "summary": "Create a new alias.",
        "operationId": "alias-create",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/alias/id/": {
      "description": "List all the alias IDs.",
      "get": {
        "summary": "List all the alias IDs.",
        "operationId": "alias-list-by-id",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/alias/id/{id}": {
      "description": "Update, read or delete an alias ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the alias",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "alias-read-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "alias-update-by-id",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasUpdateByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "alias-delete-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/entity": {
      "description": "Create a new entity",
      "post": {
        "summary": "Create a new entity",
        "operationId": "entity-create",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/entity-alias": {
      "description": "Create a new alias.",
      "post": {
        "summary": "Create a new alias.",
        "operationId": "entity-create-alias",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityCreateAliasRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/entity-alias/id/": {
      "description": "List all the alias IDs.",
      "get": {
        "summary": "List all the alias IDs.",
        "operationId": "entity-list-aliases-by-id",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/entity-alias/id/{id}": {
      "description": "Update, read or delete an alias ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the alias",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "entity-read-alias-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "entity-update-alias-by-id",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityUpdateAliasByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "entity-delete-alias-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/entity/batch-delete": {
      "description": "Delete all of the entities provided",
      "post": {
        "summary": "Delete all of the entities provided",
        "operationId": "entity-batch-delete",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityBatchDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/entity/id/": {
      "description": "List all the entity IDs",
      "get": {
        "summary": "List all the entity IDs",
        "operationId": "entity-list-by-id",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/entity/id/{id}": {
      "description": "Update, read or delete an entity using entity ID",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the entity. If set, updates the corresponding existing entity.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "entity-read-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "entity-update-by-id",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityUpdateByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "entity-delete-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/entity/merge": {
      "description": "Merge two or more entities together",
      "post": {
        "summary": "Merge two or more entities together",
        "operationId": "entity-merge",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityMergeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/entity/name/": {
      "description": "List all the entity names",
      "get": {
        "summary": "List all the entity names",
        "operationId": "entity-list-by-name",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/entity/name/{name}": {
      "description": "Update, read or delete an entity using entity name",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the entity",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "entity-read-by-name",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "entity-update-by-name",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityUpdateByNameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "entity-delete-by-name",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/group": {
      "description": "Create a new group.",
      "post": {
        "operationId": "group-create",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/group-alias": {
      "description": "Creates a new group alias, or updates an existing one.",
      "post": {
        "summary": "Creates a new group alias, or updates an existing one.",
        "operationId": "group-create-alias",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateAliasRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/group-alias/id/": {
      "description": "List all the group alias IDs.",
      "get": {
        "summary": "List all the group alias IDs.",
        "operationId": "group-list-aliases-by-id",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/group-alias/id/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "ID of the group alias.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "group-read-alias-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "group-update-alias-by-id",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateAliasByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "group-delete-alias-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/group/id/": {
      "description": "List all the group IDs.",
      "get": {
        "summary": "List all the group IDs.",
        "operationId": "group-list-by-id",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/group/id/{id}": {
      "description": "Update or delete an existing group using its ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the group. If set, updates the corresponding existing group.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "group-read-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "group-update-by-id",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "group-delete-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/group/name/": {
      "get": {
        "operationId": "group-list-by-name",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/group/name/{name}": {
      "parameters": [
        {
          "name": "name",
          "description": "Name of the group.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "group-read-by-name",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "group-update-by-name",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateByNameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "group-delete-by-name",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/lookup/entity": {
      "description": "Query entities based on various properties.",
      "post": {
        "summary": "Query entities based on various properties.",
        "operationId": "entity-look-up",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityLookUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/lookup/group": {
      "description": "Query groups based on various properties.",
      "post": {
        "summary": "Query groups based on various properties.",
        "operationId": "group-look-up",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupLookUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/login-enforcement/": {
      "get": {
        "summary": "List login enforcements",
        "operationId": "mfa-list-login-enforcements",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/mfa/login-enforcement/{name}": {
      "parameters": [
        {
          "name": "name",
          "description": "Name for this login enforcement configuration",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the current login enforcement",
        "operationId": "mfa-read-login-enforcement",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Create or update a login enforcement",
        "operationId": "mfa-write-login-enforcement",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaWriteLoginEnforcementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a login enforcement",
        "operationId": "mfa-delete-login-enforcement",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/mfa/method/": {
      "get": {
        "summary": "List MFA method configurations for all MFA methods",
        "operationId": "mfa-list-methods",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/mfa/method/duo": {
      "post": {
        "summary": "Create the given MFA method",
        "operationId": "mfa-create-duo-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaCreateDuoMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/duo/": {
      "get": {
        "summary": "List MFA method configurations for the given MFA method",
        "operationId": "mfa-list-duo-methods",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/mfa/method/duo/{method_id}": {
      "parameters": [
        {
          "name": "method_id",
          "description": "The unique identifier for this MFA method.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the current configuration for the given MFA method",
        "operationId": "mfa-read-duo-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Update the configuration for the given MFA method",
        "operationId": "mfa-update-duo-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaUpdateDuoMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the given MFA method",
        "operationId": "mfa-delete-duo-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/mfa/method/okta": {
      "post": {
        "summary": "Create the given MFA method",
        "operationId": "mfa-create-okta-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaCreateOktaMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/okta/": {
      "get": {
        "summary": "List MFA method configurations for the given MFA method",
        "operationId": "mfa-list-okta-methods",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/mfa/method/okta/{method_id}": {
      "parameters": [
        {
          "name": "method_id",
          "description": "The unique identifier for this MFA method.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the current configuration for the given MFA method",
        "operationId": "mfa-read-okta-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Update the configuration for the given MFA method",
        "operationId": "mfa-update-okta-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaUpdateOktaMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the given MFA method",
        "operationId": "mfa-delete-okta-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/mfa/method/pingid": {
      "post": {
        "summary": "Create the given MFA method",
        "operationId": "mfa-create-ping-id-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaCreatePingIdMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/pingid/": {
      "get": {
        "summary": "List MFA method configurations for the given MFA method",
        "operationId": "mfa-list-ping-id-methods",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/mfa/method/pingid/{method_id}": {
      "parameters": [
        {
          "name": "method_id",
          "description": "The unique identifier for this MFA method.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the current configuration for the given MFA method",
        "operationId": "mfa-read-ping-id-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Update the configuration for the given MFA method",
        "operationId": "mfa-update-ping-id-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaUpdatePingIdMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the given MFA method",
        "operationId": "mfa-delete-ping-id-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/mfa/method/totp": {
      "post": {
        "summary": "Create the given MFA method",
        "operationId": "mfa-create-totp-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaCreateTotpMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/totp/": {
      "get": {
        "summary": "List MFA method configurations for the given MFA method",
        "operationId": "mfa-list-totp-methods",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/mfa/method/totp/admin-destroy": {
      "post": {
        "summary": "Destroys a TOTP secret for the given MFA method ID on the given entity",
        "operationId": "mfa-admin-destroy-totp-secret",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaAdminDestroyTotpSecretRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/totp/admin-generate": {
      "post": {
        "summary": "Update or create TOTP secret for the given method ID on the given entity.",
        "operationId": "mfa-admin-generate-totp-secret",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaAdminGenerateTotpSecretRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/totp/generate": {
      "post": {
        "summary": "Update or create TOTP secret for the given method ID on the given entity.",
        "operationId": "mfa-generate-totp-secret",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaGenerateTotpSecretRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/mfa/method/totp/{method_id}": {
      "parameters": [
        {
          "name": "method_id",
          "description": "The unique identifier for this MFA method.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the current configuration for the given MFA method",
        "operationId": "mfa-read-totp-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Update the configuration for the given MFA method",
        "operationId": "mfa-update-totp-method",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaUpdateTotpMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the given MFA method",
        "operationId": "mfa-delete-totp-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/mfa/method/{method_id}": {
      "parameters": [
        {
          "name": "method_id",
          "description": "The unique identifier for this MFA method.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the current configuration for the given ID regardless of the MFA method type",
        "operationId": "mfa-read-method",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/.well-known/keys": {
      "description": "Retrieve public keys",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Retrieve public keys",
        "operationId": "oidc-read-public-keys",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/.well-known/openid-configuration": {
      "description": "Query OIDC configurations",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Query OIDC configurations",
        "operationId": "oidc-read-open-id-configuration",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/assignment/": {
      "description": "List OIDC assignments",
      "get": {
        "operationId": "oidc-list-assignments",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/oidc/assignment/{name}": {
      "description": "CRUD operations for OIDC assignments.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the assignment",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "oidc-read-assignment",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-write-assignment",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcWriteAssignmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "oidc-delete-assignment",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/oidc/client/": {
      "description": "List OIDC clients",
      "get": {
        "operationId": "oidc-list-clients",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/oidc/client/{name}": {
      "description": "CRUD operations for OIDC clients.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the client.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "oidc-read-client",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-write-client",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcWriteClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "oidc-delete-client",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/oidc/config": {
      "description": "OIDC configuration",
      "get": {
        "operationId": "oidc-read-configuration",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-configure",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/introspect": {
      "description": "Verify the authenticity of an OIDC token",
      "post": {
        "summary": "Verify the authenticity of an OIDC token",
        "operationId": "oidc-introspect",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcIntrospectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/key/": {
      "description": "List OIDC keys",
      "get": {
        "summary": "List OIDC keys",
        "operationId": "oidc-list-keys",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/oidc/key/{name}": {
      "description": "CRUD operations for OIDC keys.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "CRUD operations for OIDC keys.",
        "operationId": "oidc-read-key",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "CRUD operations for OIDC keys.",
        "operationId": "oidc-write-key",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcWriteKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "CRUD operations for OIDC keys.",
        "operationId": "oidc-delete-key",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/oidc/key/{name}/rotate": {
      "description": "Rotate a named OIDC key.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Rotate a named OIDC key.",
        "operationId": "oidc-rotate-key",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcRotateKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/provider/": {
      "description": "List OIDC providers",
      "get": {
        "operationId": "oidc-list-providers",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "allowed_client_id",
            "description": "Filters the list of OIDC providers to those that allow the given client ID in their set of allowed_client_ids.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/oidc/provider/{name}": {
      "description": "CRUD operations for OIDC providers.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "oidc-read-provider",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-write-provider",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcWriteProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "oidc-delete-provider",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/oidc/provider/{name}/.well-known/keys": {
      "description": "Retrieve public keys",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "oidc-read-provider-public-keys",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/provider/{name}/.well-known/openid-configuration": {
      "description": "Query OIDC configurations",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "oidc-read-provider-open-id-configuration",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/provider/{name}/authorize": {
      "description": "Provides the OIDC Authorization Endpoint.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "oidc-provider-authorize",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "client_id",
            "description": "The ID of the requesting client.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "description": "The code challenge derived from the code verifier.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "description": "The method that was used to derive the code challenge. The following methods are supported: 'S256', 'plain'. Defaults to 'plain'.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "plain"
            }
          },
          {
            "name": "max_age",
            "description": "The allowable elapsed time in seconds since the last time the end-user was actively authenticated.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nonce",
            "description": "The value that will be returned in the ID token nonce claim after a token exchange.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "description": "The redirection URI to which the response will be sent.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "description": "The OIDC authentication flow to be used. The following response types are supported: 'code'",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "description": "A space-delimited, case-sensitive list of scopes to be requested. The 'openid' scope is required.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "The value used to maintain state between the authentication request and client.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-provider-authorize-with-parameters",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcProviderAuthorizeWithParametersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/provider/{name}/token": {
      "description": "Provides the OIDC Token Endpoint.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "oidc-provider-token",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcProviderTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/provider/{name}/userinfo": {
      "description": "Provides the OIDC UserInfo Endpoint.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "oidc-provider-user-info",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-provider-user-info2",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/oidc/role/": {
      "description": "List configured OIDC roles",
      "get": {
        "summary": "List configured OIDC roles",
        "operationId": "oidc-list-roles",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/oidc/role/{name}": {
      "description": "CRUD operations on OIDC Roles",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "CRUD operations on OIDC Roles",
        "operationId": "oidc-read-role",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "CRUD operations on OIDC Roles",
        "operationId": "oidc-write-role",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcWriteRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "CRUD operations on OIDC Roles",
        "operationId": "oidc-delete-role",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/oidc/scope/": {
      "description": "List OIDC scopes",
      "get": {
        "operationId": "oidc-list-scopes",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/oidc/scope/{name}": {
      "description": "CRUD operations for OIDC scopes.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the scope",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "oidc-read-scope",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "oidc-write-scope",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OidcWriteScopeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "oidc-delete-scope",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/identity/oidc/token/{name}": {
      "description": "Generate an OIDC token",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Generate an OIDC token",
        "operationId": "oidc-generate-token",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/persona": {
      "description": "Create a new alias.",
      "post": {
        "summary": "Create a new alias.",
        "operationId": "persona-create",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonaCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/identity/persona/id/": {
      "description": "List all the alias IDs.",
      "get": {
        "summary": "List all the alias IDs.",
        "operationId": "persona-list-by-id",
        "tags": [
          "identity"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/persona/id/{id}": {
      "description": "Update, read or delete an alias ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the persona",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "persona-read-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "persona-update-by-id",
        "tags": [
          "identity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonaUpdateByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "persona-delete-by-id",
        "tags": [
          "identity"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/kubernetes/check": {
      "description": "Checks the Kubernetes configuration is valid.",
      "get": {
        "operationId": "kubernetes-check-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kubernetes/config": {
      "description": "Configure the Kubernetes secret engine plugin.",
      "get": {
        "operationId": "kubernetes-read-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "kubernetes-configure",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubernetesConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "kubernetes-delete-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/kubernetes/creds/{name}": {
      "description": "Request Kubernetes service account credentials for a given Vault role.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the Vault role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "kubernetes-generate-credentials",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubernetesGenerateCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kubernetes/roles/": {
      "description": "List the existing roles in this secrets engine.",
      "get": {
        "operationId": "kubernetes-list-roles",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/kubernetes/roles/{name}": {
      "description": "Manage the roles that can be created with this secrets engine.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "kubernetes-read-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "kubernetes-write-role",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubernetesWriteRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "kubernetes-delete-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ldap/config": {
      "description": "Configure the LDAP secrets engine plugin.",
      "x-vault-createSupported": true,
      "get": {
        "operationId": "ldap-read-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "ldap-configure",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "ldap-delete-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ldap/creds/{name}": {
      "description": "Request LDAP credentials for a dynamic role. These credentials are created within the LDAP system when querying this endpoint.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the dynamic role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "ldap-request-dynamic-role-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/library/": {
      "description": "List the name of each set of service accounts currently stored.",
      "get": {
        "operationId": "ldap-library-list",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ldap/library/manage/{name}/check-in": {
      "description": "Force checking service accounts in to the library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Check service accounts in to the library.",
        "operationId": "ldap-library-force-check-in",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapLibraryForceCheckInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/library/{name}": {
      "description": "Build a library of service accounts that can be checked out.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Read a library set.",
        "operationId": "ldap-library-read",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Update a library set.",
        "operationId": "ldap-library-configure",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapLibraryConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a library set.",
        "operationId": "ldap-library-delete",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ldap/library/{name}/check-in": {
      "description": "Check service accounts in to the library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Check service accounts in to the library.",
        "operationId": "ldap-library-check-in",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapLibraryCheckInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/library/{name}/check-out": {
      "description": "Check a service account out from the library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Check a service account out from the library.",
        "operationId": "ldap-library-check-out",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapLibraryCheckOutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/library/{name}/status": {
      "description": "Check the status of the service accounts in a library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Check the status of the service accounts in a library set.",
        "operationId": "ldap-library-check-status",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/role/": {
      "description": "List all the dynamic roles Vault is currently managing in LDAP.",
      "get": {
        "operationId": "ldap-list-dynamic-roles",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ldap/role/{name}": {
      "description": "Manage the static roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role (lowercase)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "ldap-read-dynamic-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "ldap-write-dynamic-role",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapWriteDynamicRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "ldap-delete-dynamic-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ldap/rotate-role/{name}": {
      "description": "Request to rotate the credentials for a static user account.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the static role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "ldap-rotate-static-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/rotate-root": {
      "description": "Request to rotate the root credentials Vault uses for the LDAP administrator account.",
      "post": {
        "operationId": "ldap-rotate-root-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/static-cred/{name}": {
      "description": "Request LDAP credentials for a certain static role. These credentials are rotated periodically.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the static role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "ldap-request-static-role-credentials",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ldap/static-role/": {
      "description": "This path lists all the static roles Vault is currently managing within the LDAP system.",
      "get": {
        "operationId": "ldap-list-static-roles",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ldap/static-role/{name}": {
      "description": "Manage the static roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "ldap-read-static-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "ldap-write-static-role",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapWriteStaticRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "ldap-delete-static-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/secret/^.*$": {},
    "/secret/config": {
      "description": "Configures settings for the KV store",
      "get": {
        "summary": "Read the backend level settings.",
        "operationId": "kv-v2-read-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KvV2ReadConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Configure backend level settings that are applied to every key in the key-value store.",
        "operationId": "kv-v2-configure",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvV2ConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/secret/data/{path}": {
      "description": "Write, Patch, Read, and Delete data in the Key-Value Store.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "kv-v2-read",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KvV2ReadResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "kv-v2-write",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvV2WriteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KvV2WriteResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "kv-v2-delete",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/secret/delete/{path}": {
      "description": "Marks one or more versions as deleted in the KV store.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "kv-v2-delete-versions",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvV2DeleteVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/secret/destroy/{path}": {
      "description": "Permanently removes one or more versions in the KV store",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "kv-v2-destroy-versions",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvV2DestroyVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/secret/metadata/{path}": {
      "description": "Configures settings for the KV store",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "kv-v2-read-metadata",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KvV2ReadMetadataResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "kv-v2-write-metadata",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvV2WriteMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "operationId": "kv-v2-delete-metadata-and-all-versions",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/secret/metadata/{path}/": {
      "description": "Configures settings for the KV store",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "kv-v2-list",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secret/subkeys/{path}": {
      "description": "Read the structure of a secret entry from the Key-Value store with the values removed.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "kv-v2-read-subkeys",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KvV2ReadSubkeysResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secret/undelete/{path}": {
      "description": "Undeletes one or more versions from the KV store.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "kv-v2-undelete-versions",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvV2UndeleteVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/ssh/config/ca": {
      "description": "Set the SSH private key used for signing certificates.",
      "get": {
        "operationId": "ssh-read-ca-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "ssh-configure-ca",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshConfigureCaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "ssh-delete-ca-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ssh/config/zeroaddress": {
      "description": "Assign zero address as default CIDR block for select roles.",
      "get": {
        "operationId": "ssh-read-zero-address-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "ssh-configure-zero-address",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshConfigureZeroAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "ssh-delete-zero-address-configuration",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ssh/creds/{role}": {
      "description": "Creates a credential for establishing SSH connection with the remote host.",
      "parameters": [
        {
          "name": "role",
          "description": "[Required] Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Creates a credential for establishing SSH connection with the remote host.",
        "operationId": "ssh-generate-credentials",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshGenerateCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ssh/issue/{role}": {
      "description": "Request a certificate using a certain role with the provided details.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "ssh-issue-certificate",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshIssueCertificateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ssh/lookup": {
      "description": "List all the roles associated with the given IP address.",
      "post": {
        "summary": "List all the roles associated with the given IP address.",
        "operationId": "ssh-list-roles-by-ip",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshListRolesByIpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ssh/public_key": {
      "description": "Retrieve the public key.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Retrieve the public key.",
        "operationId": "ssh-read-public-key",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ssh/roles/": {
      "description": "Manage the 'roles' that can be created with this backend.",
      "get": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "operationId": "ssh-list-roles",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ssh/roles/{role}": {
      "description": "Manage the 'roles' that can be created with this backend.",
      "parameters": [
        {
          "name": "role",
          "description": "[Required for all types] Name of the role being created.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "operationId": "ssh-read-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "operationId": "ssh-write-role",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshWriteRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "operationId": "ssh-delete-role",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ssh/sign/{role}": {
      "description": "Request signing an SSH key using a certain role with the provided details.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Request signing an SSH key using a certain role with the provided details.",
        "operationId": "ssh-sign-certificate",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshSignCertificateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ssh/tidy/dynamic-keys": {
      "description": "This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.",
      "delete": {
        "summary": "This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.",
        "operationId": "ssh-tidy-dynamic-host-keys",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/ssh/verify": {
      "description": "Validate the OTP provided by Vault SSH Agent.",
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Validate the OTP provided by Vault SSH Agent.",
        "operationId": "ssh-verify-otp",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshVerifyOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/audit": {
      "description": "List the currently enabled audit backends.",
      "x-vault-sudo": true,
      "get": {
        "summary": "List the enabled audit devices.",
        "operationId": "auditing-list-enabled-devices",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/audit-hash/{path}": {
      "description": "The hash of the given string via the given audit backend",
      "parameters": [
        {
          "name": "path",
          "description": "The name of the backend. Cannot be delimited. Example: \"mysql\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "auditing-calculate-hash",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditingCalculateHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditingCalculateHashResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/audit/{path}": {
      "description": "Enable or disable audit backends.",
      "parameters": [
        {
          "name": "path",
          "description": "The name of the backend. Cannot be delimited. Example: \"mysql\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "post": {
        "summary": "Enable a new audit device at the supplied path.",
        "operationId": "auditing-enable-device",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditingEnableDeviceRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Disable the audit device at the given path.",
        "operationId": "auditing-disable-device",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/auth": {
      "description": "List the currently enabled credential backends.",
      "get": {
        "operationId": "auth-list-enabled-methods",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/auth/{path}": {
      "description": "Enable a new credential backend with a name.",
      "parameters": [
        {
          "name": "path",
          "description": "The path to mount to. Cannot be delimited. Example: \"user\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Read the configuration of the auth engine at the given path.",
        "operationId": "auth-read-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthReadConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Enables a new auth method.",
        "description": "After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.\n\nFor example, enable the \"foo\" auth method will make it accessible at /auth/foo.",
        "operationId": "auth-enable-method",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthEnableMethodRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Disable the auth method at the given auth path",
        "operationId": "auth-disable-method",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/auth/{path}/tune": {
      "description": "Tune the configuration parameters for an auth path.",
      "parameters": [
        {
          "name": "path",
          "description": "Tune the configuration parameters for an auth path.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Reads the given auth path's configuration.",
        "description": "This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.",
        "operationId": "auth-read-tuning-information",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthReadTuningInformationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Tune configuration parameters for a given auth path.",
        "description": "This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.",
        "operationId": "auth-tune-configuration-parameters",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTuneConfigurationParametersRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/capabilities": {
      "description": "Fetches the capabilities of the given token on the given path.",
      "post": {
        "operationId": "query-token-capabilities",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryTokenCapabilitiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/capabilities-accessor": {
      "description": "Fetches the capabilities of the token associated with the given token, on the given path.",
      "post": {
        "operationId": "query-token-accessor-capabilities",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryTokenAccessorCapabilitiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/capabilities-self": {
      "description": "Fetches the capabilities of the given token on the given path.",
      "post": {
        "operationId": "query-token-self-capabilities",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryTokenSelfCapabilitiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/config/auditing/request-headers": {
      "description": "Lists the headers configured to be audited.",
      "x-vault-sudo": true,
      "get": {
        "summary": "List the request headers that are configured to be audited.",
        "operationId": "auditing-list-request-headers",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditingListRequestHeadersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/config/auditing/request-headers/{header}": {
      "description": "Configures the headers sent to the audit logs.",
      "parameters": [
        {
          "name": "header",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "List the information for the given request header.",
        "operationId": "auditing-read-request-header-information",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Enable auditing of a header.",
        "operationId": "auditing-enable-request-header",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditingEnableRequestHeaderRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Disable auditing of the given request header.",
        "operationId": "auditing-disable-request-header",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/config/control-group": {
      "get": {
        "operationId": "enterprise-stub-read-config-control-group",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-config-control-group",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-config-control-group",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/config/cors": {
      "description": "This path responds to the following HTTP methods. GET / Returns the configuration of the CORS setting. POST / Sets the comma-separated list of origins that can make cross-origin requests. DELETE / Clears the CORS configuration and disables acceptance of CORS requests.",
      "x-vault-sudo": true,
      "get": {
        "summary": "Return the current CORS settings.",
        "operationId": "cors-read-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorsReadConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Configure the CORS settings.",
        "operationId": "cors-configure",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorsConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Remove any CORS settings.",
        "operationId": "cors-delete-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/config/group-policy-application": {
      "get": {
        "operationId": "enterprise-stub-read-config-group-policy-application",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-config-group-policy-application",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/config/reload/{subsystem}": {
      "parameters": [
        {
          "name": "subsystem",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Reload the given subsystem",
        "operationId": "reload-subsystem",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/config/state/sanitized": {
      "get": {
        "summary": "Return a sanitized version of the Vault server configuration.",
        "description": "The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.",
        "operationId": "read-sanitized-configuration-state",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/config/ui/headers/": {
      "description": "This path responds to the following HTTP methods. GET /<header> Returns the header value. POST /<header> Sets the header value for the UI. DELETE /<header> Clears the header value for UI. LIST / List the headers configured for the UI.",
      "x-vault-sudo": true,
      "get": {
        "summary": "Return a list of configured UI headers.",
        "operationId": "ui-headers-list",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiHeadersListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/config/ui/headers/{header}": {
      "description": "This path responds to the following HTTP methods. GET /<header> Returns the header value. POST /<header> Sets the header value for the UI. DELETE /<header> Clears the header value for UI. LIST / List the headers configured for the UI.",
      "parameters": [
        {
          "name": "header",
          "description": "The name of the header.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Return the given UI header's configuration",
        "operationId": "ui-headers-read-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiHeadersReadConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Configure the values to be returned for the UI header.",
        "operationId": "ui-headers-configure",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UiHeadersConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Remove a UI header.",
        "operationId": "ui-headers-delete-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/control-group/authorize": {
      "post": {
        "operationId": "enterprise-stub-write-control-group-authorize",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/control-group/request": {
      "post": {
        "operationId": "enterprise-stub-write-control-group-request",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/decode-token": {
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Decodes the encoded token with the otp.",
        "operationId": "decode",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/experiments": {
      "description": "Returns information about Vault's experimental features. Should NOT be used in production.",
      "get": {
        "summary": "Returns the available and enabled experiments",
        "operationId": "list-experimental-features",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/generate-root": {
      "description": "Reads, generates, or deletes a root token regeneration process.",
      "get": {
        "summary": "Read the configuration and progress of the current root generation attempt.",
        "operationId": "root-token-generation-read-progress2",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootTokenGenerationReadProgress2Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Initializes a new root generation attempt.",
        "description": "Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.",
        "operationId": "root-token-generation-initialize-2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootTokenGenerationInitialize2Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootTokenGenerationInitialize2Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Cancels any in-progress root generation attempt.",
        "operationId": "root-token-generation-cancel-2",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/generate-root/attempt": {
      "description": "Reads, generates, or deletes a root token regeneration process.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Read the configuration and progress of the current root generation attempt.",
        "operationId": "root-token-generation-read-progress",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootTokenGenerationReadProgressResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Initializes a new root generation attempt.",
        "description": "Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.",
        "operationId": "root-token-generation-initialize",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootTokenGenerationInitializeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootTokenGenerationInitializeResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Cancels any in-progress root generation attempt.",
        "operationId": "root-token-generation-cancel",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/generate-root/update": {
      "description": "Reads, generates, or deletes a root token regeneration process.",
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Enter a single unseal key share to progress the root generation attempt.",
        "description": "If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.",
        "operationId": "root-token-generation-update",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootTokenGenerationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootTokenGenerationUpdateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/ha-status": {
      "description": "Provides information about the nodes in an HA cluster.",
      "get": {
        "summary": "Check the HA status of a Vault cluster",
        "operationId": "ha-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HaStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/health": {
      "description": "Checks the health status of the Vault.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Returns the health status of Vault.",
        "operationId": "read-health-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "initialized, unsealed, and active"
          },
          "429": {
            "description": "unsealed and standby"
          },
          "472": {
            "description": "data recovery mode replication secondary and active"
          },
          "501": {
            "description": "not initialized"
          },
          "503": {
            "description": "sealed"
          }
        }
      }
    },
    "/sys/host-info": {
      "description": "Information about the host instance that this Vault server is running on.",
      "get": {
        "summary": "Information about the host instance that this Vault server is running on.",
        "description": "Information about the host instance that this Vault server is running on.\n\t\tThe information that gets collected includes host hardware information, and CPU,\n\t\tdisk, and memory utilization",
        "operationId": "collect-host-information",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectHostInformationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/in-flight-req": {
      "get": {
        "summary": "reports in-flight requests",
        "description": "This path responds to the following HTTP methods.\n\t\tGET /\n\t\t\tReturns a map of in-flight requests.",
        "operationId": "collect-in-flight-request-information",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/init": {
      "description": "Initializes or returns the initialization status of the Vault.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Returns the initialization status of Vault.",
        "operationId": "read-initialization-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Initialize a new Vault.",
        "description": "The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.",
        "operationId": "initialize",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitializeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/counters/activity": {
      "description": "Query the historical count of clients.",
      "get": {
        "summary": "Report the client count metrics, for this namespace and all child namespaces.",
        "operationId": "internal-client-activity-report-counts",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/counters/activity/export": {
      "description": "Export the historical activity of clients.",
      "get": {
        "summary": "Report the client count metrics, for this namespace and all child namespaces.",
        "operationId": "internal-client-activity-export",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/counters/activity/monthly": {
      "description": "Count of active clients so far this month.",
      "get": {
        "summary": "Report the number of clients for this month, for this namespace and all child namespaces.",
        "operationId": "internal-client-activity-report-counts-this-month",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/counters/config": {
      "description": "Control the collection and reporting of client counts.",
      "get": {
        "summary": "Read the client count tracking configuration.",
        "operationId": "internal-client-activity-read-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Enable or disable collection of client count, set retention period, or set default reporting period.",
        "operationId": "internal-client-activity-configure",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalClientActivityConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/counters/entities": {
      "description": "Count of active entities in this Vault cluster.",
      "get": {
        "summary": "Backwards compatibility is not guaranteed for this API",
        "operationId": "internal-count-entities",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalCountEntitiesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/internal/counters/requests": {
      "description": "Currently unsupported. Previously, count of requests seen by this Vault cluster over time.",
      "get": {
        "summary": "Backwards compatibility is not guaranteed for this API",
        "operationId": "internal-count-requests",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/sys/internal/counters/tokens": {
      "description": "Count of active tokens in this Vault cluster.",
      "get": {
        "summary": "Backwards compatibility is not guaranteed for this API",
        "operationId": "internal-count-tokens",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalCountTokensResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/internal/inspect/router/{tag}": {
      "description": "Information on the entries in each of the trees in the router. Inspectable trees are uuid, accessor, storage, and root.",
      "parameters": [
        {
          "name": "tag",
          "description": "Name of subtree being observed",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Expose the route entry and mount entry tables present in the router",
        "operationId": "internal-inspect-router",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/specs/openapi": {
      "description": "Generate an OpenAPI 3 document of all mounted paths.",
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "internal-generate-open-api-document",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "context",
            "description": "Context string appended to every operationId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "generic_mount_paths",
            "description": "Use generic mount paths",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "internal-generate-open-api-document-with-parameters",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalGenerateOpenApiDocumentWithParametersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/internal/ui/feature-flags": {
      "description": "Enabled feature flags. Internal API; its location, inputs, and outputs may change.",
      "get": {
        "summary": "Lists enabled feature flags.",
        "operationId": "internal-ui-list-enabled-feature-flags",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalUiListEnabledFeatureFlagsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/internal/ui/mounts": {
      "description": "Information about mounts returned according to their tuned visibility. Internal API; its location, inputs, and outputs may change.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Lists all enabled and visible auth and secrets mounts.",
        "operationId": "internal-ui-list-enabled-visible-mounts",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalUiListEnabledVisibleMountsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/internal/ui/mounts/{path}": {
      "description": "Information about mounts returned according to their tuned visibility. Internal API; its location, inputs, and outputs may change.",
      "parameters": [
        {
          "name": "path",
          "description": "The path of the mount.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Return information about the given mount.",
        "operationId": "internal-ui-read-mount-information",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalUiReadMountInformationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/internal/ui/namespaces": {
      "description": "Information about visible child namespaces. Internal API; its location, inputs, and outputs may change.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Backwards compatibility is not guaranteed for this API",
        "operationId": "internal-ui-list-namespaces",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalUiListNamespacesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/internal/ui/resultant-acl": {
      "description": "Information about a token's resultant ACL. Internal API; its location, inputs, and outputs may change.",
      "get": {
        "summary": "Backwards compatibility is not guaranteed for this API",
        "operationId": "internal-ui-read-resultant-acl",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalUiReadResultantAclResponse"
                }
              }
            }
          },
          "204": {
            "description": "empty response returned if no client token"
          }
        }
      }
    },
    "/sys/key-status": {
      "description": "Provides information about the backend encryption key.",
      "get": {
        "summary": "Provides information about the backend encryption key.",
        "operationId": "encryption-key-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leader": {
      "description": "Check the high availability status and current leader of Vault",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Returns the high availability status and current leader instance of Vault.",
        "operationId": "leader-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/leases": {
      "description": "List leases associated with this Vault cluster",
      "x-vault-sudo": true,
      "get": {
        "operationId": "leases-list",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeasesListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/leases/count": {
      "description": "Count of leases associated with this Vault cluster",
      "get": {
        "operationId": "leases-count",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeasesCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/leases/lookup": {
      "description": "View or list lease metadata.",
      "post": {
        "operationId": "leases-read-lease",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesReadLeaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeasesReadLeaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/leases/lookup/{prefix}/": {
      "description": "View or list lease metadata.",
      "parameters": [
        {
          "name": "prefix",
          "description": "The path to list leases under. Example: \"aws/creds/deploy\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "operationId": "leases-look-up",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeasesLookUpResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/leases/renew": {
      "description": "Renew a lease on a secret",
      "post": {
        "summary": "Renews a lease, requesting to extend the lease.",
        "operationId": "leases-renew-lease",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRenewLeaseRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leases/renew/{url_lease_id}": {
      "description": "Renew a lease on a secret",
      "parameters": [
        {
          "name": "url_lease_id",
          "description": "The lease identifier to renew. This is included with a lease.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Renews a lease, requesting to extend the lease.",
        "operationId": "leases-renew-lease-with-id",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRenewLeaseWithIdRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leases/revoke": {
      "description": "Revoke a leased secret immediately",
      "post": {
        "summary": "Revokes a lease immediately.",
        "operationId": "leases-revoke-lease",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRevokeLeaseRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leases/revoke-force/{prefix}": {
      "description": "Revoke all secrets generated in a given prefix, ignoring errors.",
      "parameters": [
        {
          "name": "prefix",
          "description": "The path to revoke keys under. Example: \"prod/aws/ops\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "post": {
        "summary": "Revokes all secrets or tokens generated under a given prefix immediately",
        "description": "Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.\n\nBy ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.",
        "operationId": "leases-force-revoke-lease-with-prefix",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leases/revoke-prefix/{prefix}": {
      "description": "Revoke all secrets generated in a given prefix",
      "parameters": [
        {
          "name": "prefix",
          "description": "The path to revoke keys under. Example: \"prod/aws/ops\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "post": {
        "summary": "Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.",
        "operationId": "leases-revoke-lease-with-prefix",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRevokeLeaseWithPrefixRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leases/revoke/{url_lease_id}": {
      "description": "Revoke a leased secret immediately",
      "parameters": [
        {
          "name": "url_lease_id",
          "description": "The lease identifier to renew. This is included with a lease.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Revokes a lease immediately.",
        "operationId": "leases-revoke-lease-with-id",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRevokeLeaseWithIdRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/leases/tidy": {
      "description": "This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.",
      "post": {
        "operationId": "leases-tidy",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/license/status": {
      "get": {
        "operationId": "enterprise-stub-read-license-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/locked-users": {
      "description": "Report the locked user count metrics",
      "get": {
        "summary": "Report the locked user count metrics, for this namespace and all child namespaces.",
        "operationId": "locked-users-list",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/locked-users/{mount_accessor}/unlock/{alias_identifier}": {
      "description": "Unlock the locked user with given mount_accessor and alias_identifier.",
      "parameters": [
        {
          "name": "alias_identifier",
          "description": "It is the name of the alias (user). For example, if the alias belongs to userpass backend, the name should be a valid username within userpass auth method. If the alias belongs to an approle auth method, the name should be a valid RoleID",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "mount_accessor",
          "description": "MountAccessor is the identifier of the mount entry to which the user belongs",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Unlocks the user with given mount_accessor and alias_identifier",
        "operationId": "locked-users-unlock",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/loggers": {
      "get": {
        "summary": "Read the log level for all existing loggers.",
        "operationId": "loggers-read-verbosity-level",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Modify the log level for all existing loggers.",
        "operationId": "loggers-update-verbosity-level",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoggersUpdateVerbosityLevelRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Revert the all loggers to use log level provided in config.",
        "operationId": "loggers-revert-verbosity-level",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/loggers/{name}": {
      "parameters": [
        {
          "name": "name",
          "description": "The name of the logger to be modified.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the log level for a single logger.",
        "operationId": "loggers-read-verbosity-level-for",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Modify the log level of a single logger.",
        "operationId": "loggers-update-verbosity-level-for",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoggersUpdateVerbosityLevelForRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Revert a single logger to use log level provided in config.",
        "operationId": "loggers-revert-verbosity-level-for",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/managed-keys/{type}/": {
      "parameters": [
        {
          "name": "type",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-list-managed-keys-type",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/managed-keys/{type}/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "type",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "operationId": "enterprise-stub-read-managed-keys-type-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-managed-keys-type-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-managed-keys-type-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/managed-keys/{type}/{name}/test/sign": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "type",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "post": {
        "operationId": "enterprise-stub-write-managed-keys-type-name-test-sign",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/metrics": {
      "description": "Export the metrics aggregated for telemetry purpose.",
      "get": {
        "operationId": "metrics",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "format",
            "description": "Format to export metrics into. Currently accepts only \"prometheus\".",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mfa/method/": {
      "get": {
        "operationId": "enterprise-stub-list-mfa-method",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/mfa/method/duo/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-mfa-method-duo-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-mfa-method-duo-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-mfa-method-duo-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/mfa/method/okta/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-mfa-method-okta-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-mfa-method-okta-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-mfa-method-okta-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/mfa/method/pingid/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-mfa-method-pingid-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-mfa-method-pingid-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-mfa-method-pingid-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/mfa/method/totp/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-mfa-method-totp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-mfa-method-totp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-mfa-method-totp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/mfa/method/totp/{name}/admin-destroy": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "enterprise-stub-write-mfa-method-totp-name-admin-destroy",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mfa/method/totp/{name}/admin-generate": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "enterprise-stub-write-mfa-method-totp-name-admin-generate",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mfa/method/totp/{name}/generate": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-mfa-method-totp-name-generate",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mfa/validate": {
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token",
        "operationId": "mfa-validate",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaValidateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/monitor": {
      "get": {
        "operationId": "monitor",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "log_format",
            "description": "Output format of logs. Supported values are \"standard\" and \"json\". The default is \"standard\".",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "standard"
            }
          },
          {
            "name": "log_level",
            "description": "Log level to view system logs at. Currently supported values are \"trace\", \"debug\", \"info\", \"warn\", \"error\".",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mounts": {
      "description": "List the currently mounted backends.",
      "get": {
        "operationId": "mounts-list-secrets-engines",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mounts/{path}": {
      "description": "Mount a new backend at a new path.",
      "parameters": [
        {
          "name": "path",
          "description": "The path to mount to. Example: \"aws/east\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read the configuration of the secret engine at the given path.",
        "operationId": "mounts-read-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MountsReadConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Enable a new secrets engine at the given path.",
        "operationId": "mounts-enable-secrets-engine",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MountsEnableSecretsEngineRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Disable the mount point specified at the given path.",
        "operationId": "mounts-disable-secrets-engine",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/mounts/{path}/tune": {
      "description": "Tune backend configuration parameters for this mount.",
      "parameters": [
        {
          "name": "path",
          "description": "The path to mount to. Example: \"aws/east\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "mounts-read-tuning-information",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MountsReadTuningInformationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "mounts-tune-configuration-parameters",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MountsTuneConfigurationParametersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/namespaces/": {
      "get": {
        "operationId": "enterprise-stub-list-namespaces",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/namespaces/api-lock/lock": {
      "post": {
        "operationId": "enterprise-stub-write-namespaces-api-lock-lock",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/namespaces/api-lock/lock/{path}": {
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "enterprise-stub-write-namespaces-api-lock-lock-path",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/namespaces/api-lock/unlock": {
      "post": {
        "operationId": "enterprise-stub-write-namespaces-api-lock-unlock",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/namespaces/api-lock/unlock/{path}": {
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "enterprise-stub-write-namespaces-api-lock-unlock-path",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/namespaces/{path}": {
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-namespaces-path",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-namespaces-path",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-namespaces-path",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/plugins/catalog": {
      "description": "Lists all the plugins known to Vault",
      "get": {
        "operationId": "plugins-catalog-list-plugins",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsCatalogListPluginsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/plugins/catalog/{name}": {
      "description": "Configures the plugins known to Vault",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the plugin",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Return the configuration data for the plugin with the given name.",
        "operationId": "plugins-catalog-read-plugin-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsCatalogReadPluginConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new plugin, or updates an existing one with the supplied name.",
        "operationId": "plugins-catalog-register-plugin",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsCatalogRegisterPluginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Remove the plugin with the given name.",
        "operationId": "plugins-catalog-remove-plugin",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/plugins/catalog/{type}/": {
      "description": "Configures the plugins known to Vault",
      "parameters": [
        {
          "name": "type",
          "description": "The type of the plugin, may be auth, secret, or database",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "List the plugins in the catalog.",
        "operationId": "plugins-catalog-list-plugins-with-type",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsCatalogListPluginsWithTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/plugins/catalog/{type}/{name}": {
      "description": "Configures the plugins known to Vault",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the plugin",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "type",
          "description": "The type of the plugin, may be auth, secret, or database",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Return the configuration data for the plugin with the given name.",
        "operationId": "plugins-catalog-read-plugin-configuration-with-type",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsCatalogReadPluginConfigurationWithTypeResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new plugin, or updates an existing one with the supplied name.",
        "operationId": "plugins-catalog-register-plugin-with-type",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsCatalogRegisterPluginWithTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Remove the plugin with the given name.",
        "operationId": "plugins-catalog-remove-plugin-with-type",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/plugins/reload/backend": {
      "description": "Reload mounts that use a particular backend plugin.",
      "post": {
        "summary": "Reload mounted plugin backends.",
        "description": "Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.",
        "operationId": "plugins-reload-backends",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsReloadBackendsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsReloadBackendsResponse"
                }
              }
            }
          },
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsReloadBackendsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/plugins/reload/backend/status": {
      "get": {
        "operationId": "enterprise-stub-read-plugins-reload-backend-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/plugins/runtimes/catalog": {
      "description": "List all plugin runtimes in the catalog as a map of type to names.",
      "get": {
        "operationId": "plugins-runtimes-catalog-list-plugins-runtimes",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsRuntimesCatalogListPluginsRuntimesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/plugins/runtimes/catalog/": {
      "description": "List all plugin runtimes in the catalog as a map of type to names.",
      "x-vault-sudo": true,
      "get": {
        "operationId": "plugins-runtimes-catalog-list-plugins-runtimes",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsRuntimesCatalogListPluginsRuntimesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/plugins/runtimes/catalog/{type}/{name}": {
      "description": "Configures plugin runtimes",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the plugin runtime",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "type",
          "description": "The type of the plugin runtime",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Return the configuration data for the plugin runtime with the given name.",
        "operationId": "plugins-runtimes-catalog-read-plugin-runtime-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new plugin runtime, or updates an existing one with the supplied name.",
        "operationId": "plugins-runtimes-catalog-register-plugin-runtime",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsRuntimesCatalogRegisterPluginRuntimeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Remove the plugin runtime with the given name.",
        "operationId": "plugins-runtimes-catalog-remove-plugin-runtime",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/policies/acl/": {
      "description": "List the configured access control policies.",
      "get": {
        "operationId": "policies-list-acl-policies",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesListAclPoliciesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policies/acl/{name}": {
      "description": "Read, Modify, or Delete an access control policy.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the policy. Example: \"ops\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Retrieve information about the named ACL policy.",
        "operationId": "policies-read-acl-policy",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesReadAclPolicyResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new or update an existing ACL policy.",
        "operationId": "policies-write-acl-policy",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoliciesWriteAclPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the ACL policy with the given name.",
        "operationId": "policies-delete-acl-policy",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/policies/egp/": {
      "get": {
        "operationId": "enterprise-stub-list-policies-egp",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policies/egp/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-policies-egp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-policies-egp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-policies-egp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/policies/password/": {
      "get": {
        "summary": "List the existing password policies.",
        "operationId": "policies-list-password-policies",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policies/password/{name}": {
      "description": "Read, Modify, or Delete a password policy.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the password policy.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Retrieve an existing password policy.",
        "operationId": "policies-read-password-policy",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesReadPasswordPolicyResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new or update an existing password policy.",
        "operationId": "policies-write-password-policy",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoliciesWritePasswordPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a password policy.",
        "operationId": "policies-delete-password-policy",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/policies/password/{name}/generate": {
      "description": "Generate a password from an existing password policy.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the password policy.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Generate a password from an existing password policy.",
        "operationId": "policies-generate-password-from-password-policy",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesGeneratePasswordFromPasswordPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policies/rgp/": {
      "get": {
        "operationId": "enterprise-stub-list-policies-rgp",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policies/rgp/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-policies-rgp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-policies-rgp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-policies-rgp-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/policy": {
      "description": "List the configured access control policies.",
      "get": {
        "operationId": "policies-list-acl-policies2",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesListAclPolicies2Response"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policy/": {
      "description": "List the configured access control policies.",
      "get": {
        "operationId": "policies-list-acl-policies3",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesListAclPolicies3Response"
                }
              }
            }
          }
        }
      }
    },
    "/sys/policy/{name}": {
      "description": "Read, Modify, or Delete an access control policy.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the policy. Example: \"ops\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Retrieve the policy body for the named policy.",
        "operationId": "policies-read-acl-policy2",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesReadAclPolicy2Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new or update an existing policy.",
        "operationId": "policies-write-acl-policy2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoliciesWriteAclPolicy2Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the policy with the given name.",
        "operationId": "policies-delete-acl-policy2",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof": {
      "get": {
        "summary": "Returns an HTML page listing the available profiles.",
        "description": "Returns an HTML page listing the available \nprofiles. This should be mainly accessed via browsers or applications that can \nrender pages.",
        "operationId": "pprof-index",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/allocs": {
      "get": {
        "summary": "Returns a sampling of all past memory allocations.",
        "description": "Returns a sampling of all past memory allocations.",
        "operationId": "pprof-memory-allocations",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/block": {
      "get": {
        "summary": "Returns stack traces that led to blocking on synchronization primitives",
        "description": "Returns stack traces that led to blocking on synchronization primitives",
        "operationId": "pprof-blocking",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/cmdline": {
      "get": {
        "summary": "Returns the running program's command line.",
        "description": "Returns the running program's command line, with arguments separated by NUL bytes.",
        "operationId": "pprof-command-line",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/goroutine": {
      "get": {
        "summary": "Returns stack traces of all current goroutines.",
        "description": "Returns stack traces of all current goroutines.",
        "operationId": "pprof-goroutines",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/heap": {
      "get": {
        "summary": "Returns a sampling of memory allocations of live object.",
        "description": "Returns a sampling of memory allocations of live object.",
        "operationId": "pprof-memory-allocations-live",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/mutex": {
      "get": {
        "summary": "Returns stack traces of holders of contended mutexes",
        "description": "Returns stack traces of holders of contended mutexes",
        "operationId": "pprof-mutexes",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/profile": {
      "get": {
        "summary": "Returns a pprof-formatted cpu profile payload.",
        "description": "Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.",
        "operationId": "pprof-cpu-profile",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/symbol": {
      "get": {
        "summary": "Returns the program counters listed in the request.",
        "description": "Returns the program counters listed in the request.",
        "operationId": "pprof-symbols",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/threadcreate": {
      "get": {
        "summary": "Returns stack traces that led to the creation of new OS threads",
        "description": "Returns stack traces that led to the creation of new OS threads",
        "operationId": "pprof-thread-creations",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/pprof/trace": {
      "get": {
        "summary": "Returns the execution trace in binary form.",
        "description": "Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.",
        "operationId": "pprof-execution-trace",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/quotas/config": {
      "description": "Create, update and read the quota configuration.",
      "get": {
        "operationId": "rate-limit-quotas-read-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitQuotasReadConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "rate-limit-quotas-configure",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateLimitQuotasConfigureRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/quotas/lease-count/": {
      "get": {
        "operationId": "enterprise-stub-list-quotas-lease-count",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/quotas/lease-count/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-quotas-lease-count-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-quotas-lease-count-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-quotas-lease-count-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/quotas/rate-limit/": {
      "description": "Lists the names of all the rate limit quotas.",
      "get": {
        "operationId": "rate-limit-quotas-list",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/quotas/rate-limit/{name}": {
      "description": "Get, create or update rate limit resource quota for an optional namespace or mount.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the quota rule.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "rate-limit-quotas-read",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitQuotasReadResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "rate-limit-quotas-write",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateLimitQuotasWriteRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "operationId": "rate-limit-quotas-delete",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/raw/{path}": {
      "description": "Write, Read, and Delete data directly in the Storage backend.",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "x-vault-createSupported": true,
      "get": {
        "summary": "Read the value of the key at the given path.",
        "operationId": "raw-read",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawReadResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update the value of the key at the given path.",
        "operationId": "raw-write",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RawWriteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the key with given path.",
        "operationId": "raw-delete",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/raw/{path}/": {
      "description": "Write, Read, and Delete data directly in the Storage backend.",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "summary": "Return a list keys for a given path prefix.",
        "operationId": "raw-list",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/rekey/backup": {
      "description": "Allows fetching or deleting the backup of the rotated unseal keys.",
      "get": {
        "summary": "Return the backup copy of PGP-encrypted unseal keys.",
        "operationId": "rekey-read-backup-key",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyReadBackupKeyResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the backup copy of PGP-encrypted unseal keys.",
        "operationId": "rekey-delete-backup-key",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/rekey/init": {
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Reads the configuration and progress of the current rekey attempt.",
        "operationId": "rekey-attempt-read-progress",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyAttemptReadProgressResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Initializes a new rekey attempt.",
        "description": "Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.",
        "operationId": "rekey-attempt-initialize",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RekeyAttemptInitializeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyAttemptInitializeResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Cancels any in-progress rekey.",
        "description": "This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.",
        "operationId": "rekey-attempt-cancel",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/rekey/recovery-key-backup": {
      "description": "Allows fetching or deleting the backup of the rotated unseal keys.",
      "get": {
        "operationId": "rekey-read-backup-recovery-key",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyReadBackupRecoveryKeyResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "rekey-delete-backup-recovery-key",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/rekey/update": {
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Enter a single unseal key share to progress the rekey of the Vault.",
        "operationId": "rekey-attempt-update",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RekeyAttemptUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyAttemptUpdateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/rekey/verify": {
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Read the configuration and progress of the current rekey verification attempt.",
        "operationId": "rekey-verification-read-progress",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyVerificationReadProgressResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Enter a single new key share to progress the rekey verification operation.",
        "operationId": "rekey-verification-update",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RekeyVerificationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyVerificationUpdateResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Cancel any in-progress rekey verification operation.",
        "description": "This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.",
        "operationId": "rekey-verification-cancel",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RekeyVerificationCancelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/remount": {
      "description": "Move the mount point of an already-mounted backend, within or across namespaces",
      "x-vault-sudo": true,
      "post": {
        "summary": "Initiate a mount migration",
        "operationId": "remount",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/remount/status/{migration_id}": {
      "description": "Check the status of a mount move operation",
      "parameters": [
        {
          "name": "migration_id",
          "description": "The ID of the migration operation",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Check status of a mount migration",
        "operationId": "remount-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemountStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/renew": {
      "description": "Renew a lease on a secret",
      "post": {
        "summary": "Renews a lease, requesting to extend the lease.",
        "operationId": "leases-renew-lease2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRenewLease2Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/renew/{url_lease_id}": {
      "description": "Renew a lease on a secret",
      "parameters": [
        {
          "name": "url_lease_id",
          "description": "The lease identifier to renew. This is included with a lease.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Renews a lease, requesting to extend the lease.",
        "operationId": "leases-renew-lease-with-id2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRenewLeaseWithId2Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/primary/demote": {
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-primary-demote",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/primary/disable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-primary-disable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/primary/enable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-primary-enable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/primary/revoke-secondary": {
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-primary-revoke-secondary",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/primary/secondary-token": {
      "x-vault-sudo": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-primary-secondary-token",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/config/reload/{subsystem}": {
      "parameters": [
        {
          "name": "subsystem",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-config-reload-subsystem",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/disable": {
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-disable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/enable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-enable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/generate-public-key": {
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-generate-public-key",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/license/status": {
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "enterprise-stub-read-replication-dr-secondary-license-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/operation-token/delete": {
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-operation-token-delete",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/promote": {
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-promote",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/recover": {
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-recover",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/reindex": {
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-reindex",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/secondary/update-primary": {
      "x-vault-unauthenticated": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-dr-secondary-update-primary",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/dr/status": {
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "enterprise-stub-read-replication-dr-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/primary/demote": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-primary-demote",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/primary/disable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-primary-disable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/primary/dynamic-filter/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-replication-performance-primary-dynamic-filter-id",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/primary/enable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-primary-enable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/primary/paths-filter/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-replication-performance-primary-paths-filter-id",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-primary-paths-filter-id",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-replication-performance-primary-paths-filter-id",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/replication/performance/primary/revoke-secondary": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-primary-revoke-secondary",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/primary/secondary-token": {
      "x-vault-sudo": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-primary-secondary-token",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/secondary/disable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-secondary-disable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/secondary/dynamic-filter/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-replication-performance-secondary-dynamic-filter-id",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/secondary/enable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-secondary-enable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/secondary/generate-public-key": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-secondary-generate-public-key",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/secondary/promote": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-secondary-promote",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/secondary/update-primary": {
      "post": {
        "operationId": "enterprise-stub-write-replication-performance-secondary-update-primary",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/performance/status": {
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "enterprise-stub-read-replication-performance-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/primary/demote": {
      "post": {
        "operationId": "enterprise-stub-write-replication-primary-demote",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/primary/disable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-primary-disable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/primary/enable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-primary-enable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/primary/revoke-secondary": {
      "post": {
        "operationId": "enterprise-stub-write-replication-primary-revoke-secondary",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/primary/secondary-token": {
      "x-vault-sudo": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-primary-secondary-token",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/recover": {
      "post": {
        "operationId": "enterprise-stub-write-replication-recover",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/reindex": {
      "x-vault-sudo": true,
      "post": {
        "operationId": "enterprise-stub-write-replication-reindex",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/secondary/disable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-secondary-disable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/secondary/enable": {
      "post": {
        "operationId": "enterprise-stub-write-replication-secondary-enable",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/secondary/promote": {
      "post": {
        "operationId": "enterprise-stub-write-replication-secondary-promote",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/secondary/update-primary": {
      "post": {
        "operationId": "enterprise-stub-write-replication-secondary-update-primary",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/replication/status": {
      "x-vault-unauthenticated": true,
      "get": {
        "operationId": "read-replication-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/revoke": {
      "description": "Revoke a leased secret immediately",
      "post": {
        "summary": "Revokes a lease immediately.",
        "operationId": "leases-revoke-lease2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRevokeLease2Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/revoke-force/{prefix}": {
      "description": "Revoke all secrets generated in a given prefix, ignoring errors.",
      "parameters": [
        {
          "name": "prefix",
          "description": "The path to revoke keys under. Example: \"prod/aws/ops\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "post": {
        "summary": "Revokes all secrets or tokens generated under a given prefix immediately",
        "description": "Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.\n\nBy ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.",
        "operationId": "leases-force-revoke-lease-with-prefix2",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/revoke-prefix/{prefix}": {
      "description": "Revoke all secrets generated in a given prefix",
      "parameters": [
        {
          "name": "prefix",
          "description": "The path to revoke keys under. Example: \"prod/aws/ops\"",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "post": {
        "summary": "Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.",
        "operationId": "leases-revoke-lease-with-prefix2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRevokeLeaseWithPrefix2Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/revoke/{url_lease_id}": {
      "description": "Revoke a leased secret immediately",
      "parameters": [
        {
          "name": "url_lease_id",
          "description": "The lease identifier to renew. This is included with a lease.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Revokes a lease immediately.",
        "operationId": "leases-revoke-lease-with-id2",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasesRevokeLeaseWithId2Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/rotate": {
      "description": "Rotates the backend encryption key used to persist data.",
      "x-vault-sudo": true,
      "post": {
        "operationId": "encryption-key-rotate",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/rotate/config": {
      "description": "Configures settings related to the backend encryption key management.",
      "get": {
        "operationId": "encryption-key-read-rotation-configuration",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionKeyReadRotationConfigurationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "encryption-key-configure-rotation",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionKeyConfigureRotationRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/seal": {
      "description": "Seals the Vault.",
      "x-vault-sudo": true,
      "post": {
        "summary": "Seal the Vault.",
        "operationId": "seal",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/seal-status": {
      "description": "Returns the seal status of the Vault.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Check the seal status of a Vault.",
        "operationId": "seal-status",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SealStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/sealwrap/rewrap": {
      "get": {
        "operationId": "enterprise-stub-read-sealwrap-rewrap",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-sealwrap-rewrap",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/step-down": {
      "x-vault-sudo": true,
      "post": {
        "summary": "Cause the node to give up active status.",
        "description": "This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.",
        "operationId": "step-down-leader",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/storage/raft/snapshot-auto/config/": {
      "x-vault-sudo": true,
      "get": {
        "operationId": "enterprise-stub-list-storage-raft-snapshot-auto-config",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/storage/raft/snapshot-auto/config/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-sudo": true,
      "get": {
        "operationId": "enterprise-stub-read-storage-raft-snapshot-auto-config-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "enterprise-stub-write-storage-raft-snapshot-auto-config-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "operationId": "enterprise-stub-delete-storage-raft-snapshot-auto-config-name",
        "tags": [
          "system"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sys/storage/raft/snapshot-auto/status/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "enterprise-stub-read-storage-raft-snapshot-auto-status-name",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/tools/hash": {
      "description": "Generate a hash sum for input data",
      "post": {
        "operationId": "generate-hash",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateHashResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/tools/hash/{urlalgorithm}": {
      "description": "Generate a hash sum for input data",
      "parameters": [
        {
          "name": "urlalgorithm",
          "description": "Algorithm to use (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "generate-hash-with-algorithm",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateHashWithAlgorithmRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateHashWithAlgorithmResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/tools/random": {
      "description": "Generate random bytes",
      "post": {
        "operationId": "generate-random",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRandomRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRandomResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/tools/random/{source}": {
      "description": "Generate random bytes",
      "parameters": [
        {
          "name": "source",
          "description": "Which system to source random data from, ether \"platform\", \"seal\", or \"all\".",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "platform"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "generate-random-with-source",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRandomWithSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRandomWithSourceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/tools/random/{source}/{urlbytes}": {
      "description": "Generate random bytes",
      "parameters": [
        {
          "name": "source",
          "description": "Which system to source random data from, ether \"platform\", \"seal\", or \"all\".",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "platform"
          },
          "required": true
        },
        {
          "name": "urlbytes",
          "description": "The number of bytes to generate (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "generate-random-with-source-and-bytes",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRandomWithSourceAndBytesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRandomWithSourceAndBytesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/tools/random/{urlbytes}": {
      "description": "Generate random bytes",
      "parameters": [
        {
          "name": "urlbytes",
          "description": "The number of bytes to generate (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "operationId": "generate-random-with-bytes",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRandomWithBytesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRandomWithBytesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/unseal": {
      "description": "Unseals the Vault.",
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Unseal the Vault.",
        "operationId": "unseal",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsealRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsealResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/version-history/": {
      "description": "List historical version changes sorted by installation time in ascending order.",
      "get": {
        "summary": "Returns map of historical version change entries",
        "operationId": "version-history",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/wrapping/lookup": {
      "description": "Looks up the properties of a response-wrapped token.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Look up wrapping properties for the requester's token.",
        "operationId": "read-wrapping-properties2",
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadWrappingProperties2Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Look up wrapping properties for the given token.",
        "operationId": "read-wrapping-properties",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadWrappingPropertiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadWrappingPropertiesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sys/wrapping/rewrap": {
      "description": "Rotates a response-wrapped token.",
      "post": {
        "operationId": "rewrap",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewrapRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sys/wrapping/unwrap": {
      "description": "Unwraps a response-wrapped token.",
      "post": {
        "operationId": "unwrap",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnwrapRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/sys/wrapping/wrap": {
      "description": "Response-wraps an arbitrary JSON object.",
      "post": {
        "operationId": "wrap",
        "tags": [
          "system"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AliasCreateRequest": {
        "type": "object",
        "properties": {
          "canonical_id": {
            "type": "string",
            "description": "Entity ID to which this alias belongs to"
          },
          "entity_id": {
            "type": "string",
            "description": "Entity ID to which this alias belongs to. This field is deprecated in favor of 'canonical_id'."
          },
          "id": {
            "type": "string",
            "description": "ID of the alias"
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this alias belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the alias"
          }
        }
      },
      "AliasUpdateByIdRequest": {
        "type": "object",
        "properties": {
          "canonical_id": {
            "type": "string",
            "description": "Entity ID to which this alias should be tied to"
          },
          "entity_id": {
            "type": "string",
            "description": "Entity ID to which this alias should be tied to. This field is deprecated in favor of 'canonical_id'."
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this alias belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the alias"
          }
        }
      },
      "AuditingCalculateHashRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string"
          }
        }
      },
      "AuditingCalculateHashResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          }
        }
      },
      "AuditingEnableDeviceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "User-friendly description for this audit backend."
          },
          "local": {
            "type": "boolean",
            "description": "Mark the mount as a local mount, which is not replicated and is unaffected by replication.",
            "default": false
          },
          "options": {
            "type": "object",
            "description": "Configuration options for the audit backend.",
            "format": "kvpairs"
          },
          "type": {
            "type": "string",
            "description": "The type of the backend. Example: \"mysql\""
          }
        }
      },
      "AuditingEnableRequestHeaderRequest": {
        "type": "object",
        "properties": {
          "hmac": {
            "type": "boolean"
          }
        }
      },
      "AuditingListRequestHeadersResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "AuthEnableMethodRequest": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "description": "Configuration for this mount, such as plugin_name.",
            "format": "map"
          },
          "description": {
            "type": "string",
            "description": "User-friendly description for this credential backend."
          },
          "external_entropy_access": {
            "type": "boolean",
            "description": "Whether to give the mount access to Vault's external entropy.",
            "default": false
          },
          "local": {
            "type": "boolean",
            "description": "Mark the mount as a local mount, which is not replicated and is unaffected by replication.",
            "default": false
          },
          "options": {
            "type": "object",
            "description": "The options to pass into the backend. Should be a json object with string keys and values.",
            "format": "kvpairs"
          },
          "plugin_name": {
            "type": "string",
            "description": "Name of the auth plugin to use based from the name in the plugin catalog."
          },
          "plugin_version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          },
          "seal_wrap": {
            "type": "boolean",
            "description": "Whether to turn on seal wrapping for the mount.",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "The type of the backend. Example: \"userpass\""
          }
        }
      },
      "AuthReadConfigurationResponse": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "format": "map"
          },
          "deprecation_status": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_entropy_access": {
            "type": "boolean"
          },
          "local": {
            "type": "boolean"
          },
          "options": {
            "type": "object",
            "format": "map"
          },
          "plugin_version": {
            "type": "string"
          },
          "running_plugin_version": {
            "type": "string"
          },
          "running_sha256": {
            "type": "string"
          },
          "seal_wrap": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AuthReadTuningInformationResponse": {
        "type": "object",
        "properties": {
          "allowed_managed_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_response_headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_request_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_response_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_lease_ttl": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "external_entropy_access": {
            "type": "boolean"
          },
          "force_no_cache": {
            "type": "boolean"
          },
          "listing_visibility": {
            "type": "string"
          },
          "max_lease_ttl": {
            "type": "integer"
          },
          "options": {
            "type": "object",
            "format": "map"
          },
          "passthrough_request_headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "plugin_version": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "user_lockout_counter_reset_duration": {
            "type": "integer",
            "format": "int64"
          },
          "user_lockout_disable": {
            "type": "boolean"
          },
          "user_lockout_duration": {
            "type": "integer",
            "format": "int64"
          },
          "user_lockout_threshold": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AuthTuneConfigurationParametersRequest": {
        "type": "object",
        "properties": {
          "allowed_response_headers": {
            "type": "array",
            "description": "A list of headers to whitelist and allow a plugin to set on responses.",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_request_keys": {
            "type": "array",
            "description": "The list of keys in the request data object that will not be HMAC'ed by audit devices.",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_response_keys": {
            "type": "array",
            "description": "The list of keys in the response data object that will not be HMAC'ed by audit devices.",
            "items": {
              "type": "string"
            }
          },
          "default_lease_ttl": {
            "type": "string",
            "description": "The default lease TTL for this mount."
          },
          "description": {
            "type": "string",
            "description": "User-friendly description for this credential backend."
          },
          "listing_visibility": {
            "type": "string",
            "description": "Determines the visibility of the mount in the UI-specific listing endpoint. Accepted value are 'unauth' and 'hidden', with the empty default ('') behaving like 'hidden'."
          },
          "max_lease_ttl": {
            "type": "string",
            "description": "The max lease TTL for this mount."
          },
          "options": {
            "type": "object",
            "description": "The options to pass into the backend. Should be a json object with string keys and values.",
            "format": "kvpairs"
          },
          "passthrough_request_headers": {
            "type": "array",
            "description": "A list of headers to whitelist and pass from the request to the plugin.",
            "items": {
              "type": "string"
            }
          },
          "plugin_version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to issue (service or batch)."
          },
          "user_lockout_config": {
            "type": "object",
            "description": "The user lockout configuration to pass into the backend. Should be a json object with string keys and values.",
            "format": "map"
          }
        }
      },
      "AwsConfigureCertificateRequest": {
        "type": "object",
        "properties": {
          "aws_public_cert": {
            "type": "string",
            "description": "Base64 encoded AWS Public cert required to verify PKCS7 signature of the EC2 instance metadata."
          },
          "type": {
            "type": "string",
            "description": "Takes the value of either \"pkcs7\" or \"identity\", indicating the type of document which can be verified using the given certificate. The reason is that the PKCS#7 document will have a DSA digest and the identity signature will have an RSA signature, and accordingly the public certificates to verify those also vary. Defaults to \"pkcs7\".",
            "default": "pkcs7"
          }
        }
      },
      "AwsConfigureClientRequest": {
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "description": "AWS Access Key ID for the account used to make AWS API requests.",
            "default": ""
          },
          "allowed_sts_header_values": {
            "type": "array",
            "description": "List of additional headers that are allowed to be in AWS STS request headers",
            "items": {
              "type": "string"
            }
          },
          "endpoint": {
            "type": "string",
            "description": "URL to override the default generated endpoint for making AWS EC2 API calls.",
            "default": ""
          },
          "iam_endpoint": {
            "type": "string",
            "description": "URL to override the default generated endpoint for making AWS IAM API calls.",
            "default": ""
          },
          "iam_server_id_header_value": {
            "type": "string",
            "description": "Value to require in the X-Vault-AWS-IAM-Server-ID request header",
            "default": ""
          },
          "max_retries": {
            "type": "integer",
            "description": "Maximum number of retries for recoverable exceptions of AWS APIs",
            "default": -1
          },
          "secret_key": {
            "type": "string",
            "description": "AWS Secret Access Key for the account used to make AWS API requests.",
            "default": ""
          },
          "sts_endpoint": {
            "type": "string",
            "description": "URL to override the default generated endpoint for making AWS STS API calls.",
            "default": ""
          },
          "sts_region": {
            "type": "string",
            "description": "The region ID for the sts_endpoint, if set.",
            "default": ""
          },
          "use_sts_region_from_client": {
            "type": "boolean",
            "description": "Uses the STS region from client requests for making AWS STS API calls.",
            "default": false
          }
        }
      },
      "AwsConfigureIdentityAccessListTidyOperationRequest": {
        "type": "object",
        "properties": {
          "disable_periodic_tidy": {
            "type": "boolean",
            "description": "If set to 'true', disables the periodic tidying of the 'identity-accesslist/<instance_id>' entries.",
            "default": false
          },
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the identity's expiration, before it is removed from the backend storage.",
            "format": "duration",
            "default": 259200
          }
        }
      },
      "AwsConfigureIdentityIntegrationRequest": {
        "type": "object",
        "properties": {
          "ec2_alias": {
            "type": "string",
            "description": "Configure how the AWS auth method generates entity alias when using EC2 auth. Valid values are \"role_id\", \"instance_id\", and \"image_id\". Defaults to \"role_id\".",
            "default": "instance_id"
          },
          "ec2_metadata": {
            "type": "array",
            "description": "The metadata to include on the aliases and audit logs generated by this plugin. When set to 'default', includes: account_id, auth_type. These fields are available to add: ami_id, instance_id, region. Not editing this field means the 'default' fields are included. Explicitly setting this field to empty overrides the 'default' and means no metadata will be included. If not using 'default', explicit fields must be sent like: 'field1,field2'.",
            "items": {
              "type": "string"
            },
            "default": [
              "default"
            ],
            "x-vault-displayAttrs": {
              "name": "ec2_metadata",
              "value": "field1,field2"
            }
          },
          "iam_alias": {
            "type": "string",
            "description": "Configure how the AWS auth method generates entity aliases when using IAM auth. Valid values are \"role_id\", \"unique_id\", and \"full_arn\". Defaults to \"role_id\".",
            "default": "unique_id"
          },
          "iam_metadata": {
            "type": "array",
            "description": "The metadata to include on the aliases and audit logs generated by this plugin. When set to 'default', includes: account_id, auth_type. These fields are available to add: canonical_arn, client_arn, client_user_id, inferred_aws_region, inferred_entity_id, inferred_entity_type. Not editing this field means the 'default' fields are included. Explicitly setting this field to empty overrides the 'default' and means no metadata will be included. If not using 'default', explicit fields must be sent like: 'field1,field2'.",
            "items": {
              "type": "string"
            },
            "default": [
              "default"
            ],
            "x-vault-displayAttrs": {
              "name": "iam_metadata",
              "value": "field1,field2"
            }
          }
        }
      },
      "AwsConfigureIdentityWhitelistTidyOperationRequest": {
        "type": "object",
        "properties": {
          "disable_periodic_tidy": {
            "type": "boolean",
            "description": "If set to 'true', disables the periodic tidying of the 'identity-accesslist/<instance_id>' entries.",
            "default": false
          },
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the identity's expiration, before it is removed from the backend storage.",
            "format": "duration",
            "default": 259200
          }
        }
      },
      "AwsConfigureRoleTagBlacklistTidyOperationRequest": {
        "type": "object",
        "properties": {
          "disable_periodic_tidy": {
            "type": "boolean",
            "description": "If set to 'true', disables the periodic tidying of deny listed entries.",
            "default": false
          },
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the roletag expiration, before it is removed from the backend storage. Defaults to 4320h (180 days).",
            "format": "duration",
            "default": 15552000
          }
        }
      },
      "AwsConfigureRoleTagDenyListTidyOperationRequest": {
        "type": "object",
        "properties": {
          "disable_periodic_tidy": {
            "type": "boolean",
            "description": "If set to 'true', disables the periodic tidying of deny listed entries.",
            "default": false
          },
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the roletag expiration, before it is removed from the backend storage. Defaults to 4320h (180 days).",
            "format": "duration",
            "default": 15552000
          }
        }
      },
      "AwsLoginRequest": {
        "type": "object",
        "properties": {
          "iam_http_request_method": {
            "type": "string",
            "description": "HTTP method to use for the AWS request when auth_type is iam. This must match what has been signed in the presigned request."
          },
          "iam_request_body": {
            "type": "string",
            "description": "Base64-encoded request body when auth_type is iam. This must match the request body included in the signature."
          },
          "iam_request_headers": {
            "type": "string",
            "description": "Key/value pairs of headers for use in the sts:GetCallerIdentity HTTP requests headers when auth_type is iam. Can be either a Base64-encoded, JSON-serialized string, or a JSON object of key/value pairs. This must at a minimum include the headers over which AWS has included a signature."
          },
          "iam_request_url": {
            "type": "string",
            "description": "Base64-encoded full URL against which to make the AWS request when using iam auth_type."
          },
          "identity": {
            "type": "string",
            "description": "Base64 encoded EC2 instance identity document. This needs to be supplied along with the 'signature' parameter. If using 'curl' for fetching the identity document, consider using the option '-w 0' while piping the output to 'base64' binary."
          },
          "nonce": {
            "type": "string",
            "description": "The nonce to be used for subsequent login requests when auth_type is ec2. If this parameter is not specified at all and if reauthentication is allowed, then the backend will generate a random nonce, attaches it to the instance's identity access list entry and returns the nonce back as part of auth metadata. This value should be used with further login requests, to establish client authenticity. Clients can choose to set a custom nonce if preferred, in which case, it is recommended that clients provide a strong nonce. If a nonce is provided but with an empty value, it indicates intent to disable reauthentication. Note that, when 'disallow_reauthentication' option is enabled on either the role or the role tag, the 'nonce' holds no significance."
          },
          "pkcs7": {
            "type": "string",
            "description": "PKCS7 signature of the identity document when using an auth_type of ec2."
          },
          "role": {
            "type": "string",
            "description": "Name of the role against which the login is being attempted. If 'role' is not specified, then the login endpoint looks for a role bearing the name of the AMI ID of the EC2 instance that is trying to login. If a matching role is not found, login fails."
          },
          "signature": {
            "type": "string",
            "description": "Base64 encoded SHA256 RSA signature of the instance identity document. This needs to be supplied along with 'identity' parameter."
          }
        }
      },
      "AwsTidyIdentityAccessListRequest": {
        "type": "object",
        "properties": {
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the identity's expiration, before it is removed from the backend storage.",
            "format": "duration",
            "default": 259200
          }
        }
      },
      "AwsTidyIdentityWhitelistRequest": {
        "type": "object",
        "properties": {
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the identity's expiration, before it is removed from the backend storage.",
            "format": "duration",
            "default": 259200
          }
        }
      },
      "AwsTidyRoleTagBlacklistRequest": {
        "type": "object",
        "properties": {
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the roletag expiration, before it is removed from the backend storage.",
            "format": "duration",
            "default": 259200
          }
        }
      },
      "AwsTidyRoleTagDenyListRequest": {
        "type": "object",
        "properties": {
          "safety_buffer": {
            "type": "string",
            "description": "The amount of extra time that must have passed beyond the roletag expiration, before it is removed from the backend storage.",
            "format": "duration",
            "default": 259200
          }
        }
      },
      "AwsWriteAuthRoleRequest": {
        "type": "object",
        "properties": {
          "allow_instance_migration": {
            "type": "boolean",
            "description": "If set, allows migration of the underlying instance where the client resides. This keys off of pendingTime in the metadata document, so essentially, this disables the client nonce check whenever the instance is migrated to a new host and pendingTime is newer than the previously-remembered time. Use with caution. This is only checked when auth_type is ec2.",
            "default": false
          },
          "auth_type": {
            "type": "string",
            "description": "The auth_type permitted to authenticate to this role. Must be one of iam or ec2 and cannot be changed after role creation."
          },
          "bound_account_id": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instances that the account ID in its identity document to match one of the IDs specified by this parameter. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            }
          },
          "bound_ami_id": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instances that they should be using one of the AMI IDs specified by this parameter. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            }
          },
          "bound_ec2_instance_id": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instances to have one of the given instance IDs. Can be a list or comma-separated string of EC2 instance IDs. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "description": "If set, defines a constraint on the EC2 instances to have one of the given instance IDs. A list of EC2 instance IDs. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance."
            }
          },
          "bound_iam_instance_profile_arn": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instances to be associated with an IAM instance profile ARN which has a prefix that matches one of the values specified by this parameter. The value is prefix-matched (as though it were a glob ending in '*'). This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            }
          },
          "bound_iam_principal_arn": {
            "type": "array",
            "description": "ARN of the IAM principals to bind to this role. Only applicable when auth_type is iam.",
            "items": {
              "type": "string"
            }
          },
          "bound_iam_role_arn": {
            "type": "array",
            "description": "If set, defines a constraint on the authenticating EC2 instance that it must match one of the IAM role ARNs specified by this parameter. The value is prefix-matched (as though it were a glob ending in '*'). The configured IAM user or EC2 instance role must be allowed to execute the 'iam:GetInstanceProfile' action if this is specified. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            }
          },
          "bound_region": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instances that the region in its identity document match one of the regions specified by this parameter. This is only applicable when auth_type is ec2.",
            "items": {
              "type": "string"
            }
          },
          "bound_subnet_id": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instance to be associated with the subnet ID that matches one of the values specified by this parameter. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            }
          },
          "bound_vpc_id": {
            "type": "array",
            "description": "If set, defines a constraint on the EC2 instance to be associated with a VPC ID that matches one of the value specified by this parameter. This is only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.",
            "items": {
              "type": "string"
            }
          },
          "disallow_reauthentication": {
            "type": "boolean",
            "description": "If set, only allows a single token to be granted per instance ID. In order to perform a fresh login, the entry in the access list for the instance ID needs to be cleared using 'auth/aws-ec2/identity-accesslist/<instance_id>' endpoint. This is only applicable when auth_type is ec2.",
            "default": false
          },
          "inferred_aws_region": {
            "type": "string",
            "description": "When auth_type is iam and inferred_entity_type is set, the region to assume the inferred entity exists in."
          },
          "inferred_entity_type": {
            "type": "string",
            "description": "When auth_type is iam, the AWS entity type to infer from the authenticated principal. The only supported value is ec2_instance, which will extract the EC2 instance ID from the authenticated role and apply the following restrictions specific to EC2 instances: bound_ami_id, bound_account_id, bound_iam_role_arn, bound_iam_instance_profile_arn, bound_vpc_id, bound_subnet_id. The configured EC2 client must be able to find the inferred instance ID in the results, and the instance must be running. If unable to determine the EC2 instance ID or unable to find the EC2 instance ID among running instances, then authentication will fail."
          },
          "max_ttl": {
            "type": "string",
            "description": "Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.",
            "format": "duration",
            "deprecated": true
          },
          "period": {
            "type": "string",
            "description": "Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.",
            "format": "duration",
            "deprecated": true
          },
          "policies": {
            "type": "array",
            "description": "Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "resolve_aws_unique_ids": {
            "type": "boolean",
            "description": "If set, resolve all AWS IAM ARNs into AWS's internal unique IDs. When an IAM entity (e.g., user, role, or instance profile) is deleted, then all references to it within the role will be invalidated, which prevents a new IAM entity from being created with the same name and matching the role's IAM binds. Once set, this cannot be unset.",
            "default": true
          },
          "role_tag": {
            "type": "string",
            "description": "If set, enables the role tags for this role. The value set for this field should be the 'key' of the tag on the EC2 instance. The 'value' of the tag should be generated using 'role/<role>/tag' endpoint. Defaults to an empty string, meaning that role tags are disabled. This is only allowed if auth_type is ec2.",
            "default": ""
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "description": "A list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "string",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_max_ttl": {
            "type": "string",
            "description": "The maximum lifetime of the generated token",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "string",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_policies": {
            "type": "array",
            "description": "Comma-separated list of policies",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Policies",
              "description": "A list of policies that will apply to the generated token for this user.",
              "group": "Tokens"
            }
          },
          "token_ttl": {
            "type": "string",
            "description": "The initial ttl of the token to generate",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Initial TTL",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          },
          "ttl": {
            "type": "string",
            "description": "Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.",
            "format": "duration",
            "deprecated": true
          }
        }
      },
      "AwsWriteRoleTagRequest": {
        "type": "object",
        "properties": {
          "allow_instance_migration": {
            "type": "boolean",
            "description": "If set, allows migration of the underlying instance where the client resides. This keys off of pendingTime in the metadata document, so essentially, this disables the client nonce check whenever the instance is migrated to a new host and pendingTime is newer than the previously-remembered time. Use with caution.",
            "default": false
          },
          "disallow_reauthentication": {
            "type": "boolean",
            "description": "If set, only allows a single token to be granted per instance ID. In order to perform a fresh login, the entry in access list for the instance ID needs to be cleared using the 'auth/aws-ec2/identity-accesslist/<instance_id>' endpoint.",
            "default": false
          },
          "instance_id": {
            "type": "string",
            "description": "Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID."
          },
          "max_ttl": {
            "type": "string",
            "description": "If set, specifies the maximum allowed token lifetime.",
            "format": "duration",
            "default": 0
          },
          "policies": {
            "type": "array",
            "description": "Policies to be associated with the tag. If set, must be a subset of the role's policies. If set, but set to an empty value, only the 'default' policy will be given to issued tokens.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AwsWriteStsRoleRequest": {
        "type": "object",
        "properties": {
          "sts_role": {
            "type": "string",
            "description": "AWS ARN for STS role to be assumed when interacting with the account specified. The Vault server must have permissions to assume this role."
          }
        }
      },
      "CollectHostInformationResponse": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "cpu_times": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "disk": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "host": {
            "type": "object",
            "format": "map"
          },
          "memory": {
            "type": "object",
            "format": "map"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CorsConfigureRequest": {
        "type": "object",
        "properties": {
          "allowed_headers": {
            "type": "array",
            "description": "A comma-separated string or array of strings indicating headers that are allowed on cross-origin requests.",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "description": "A comma-separated string or array of strings indicating origins that may make cross-origin requests.",
            "items": {
              "type": "string"
            }
          },
          "enable": {
            "type": "boolean",
            "description": "Enables or disables CORS headers on requests."
          }
        }
      },
      "CorsReadConfigurationResponse": {
        "type": "object",
        "properties": {
          "allowed_headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "DatabaseConfigureConnectionRequest": {
        "type": "object",
        "properties": {
          "allowed_roles": {
            "type": "array",
            "description": "Comma separated string or array of the role names allowed to get creds from this database connection. If empty no roles are allowed. If \"*\" all roles are allowed.",
            "items": {
              "type": "string"
            }
          },
          "password_policy": {
            "type": "string",
            "description": "Password policy to use when generating passwords."
          },
          "plugin_name": {
            "type": "string",
            "description": "The name of a builtin or previously registered plugin known to vault. This endpoint will create an instance of that plugin type."
          },
          "plugin_version": {
            "type": "string",
            "description": "The version of the plugin to use."
          },
          "root_rotation_statements": {
            "type": "array",
            "description": "Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter.",
            "items": {
              "type": "string"
            }
          },
          "verify_connection": {
            "type": "boolean",
            "description": "If true, the connection details are verified by actually connecting to the database. Defaults to true.",
            "default": true
          }
        }
      },
      "DatabaseWriteRoleRequest": {
        "type": "object",
        "properties": {
          "creation_statements": {
            "type": "array",
            "description": "Specifies the database statements executed to create and configure a user. See the plugin's API page for more information on support and formatting for this parameter.",
            "items": {
              "type": "string"
            }
          },
          "credential_config": {
            "type": "object",
            "description": "The configuration for the given credential_type.",
            "format": "kvpairs"
          },
          "credential_type": {
            "type": "string",
            "description": "The type of credential to manage. Options include: 'password', 'rsa_private_key'. Defaults to 'password'.",
            "default": "password"
          },
          "db_name": {
            "type": "string",
            "description": "Name of the database this role acts on."
          },
          "default_ttl": {
            "type": "string",
            "description": "Default ttl for role.",
            "format": "duration"
          },
          "max_ttl": {
            "type": "string",
            "description": "Maximum time a credential is valid for",
            "format": "duration"
          },
          "renew_statements": {
            "type": "array",
            "description": "Specifies the database statements to be executed to renew a user. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter.",
            "items": {
              "type": "string"
            }
          },
          "revocation_statements": {
            "type": "array",
            "description": "Specifies the database statements to be executed to revoke a user. See the plugin's API page for more information on support and formatting for this parameter.",
            "items": {
              "type": "string"
            }
          },
          "rollback_statements": {
            "type": "array",
            "description": "Specifies the database statements to be executed rollback a create operation in the event of an error. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DatabaseWriteStaticRoleRequest": {
        "type": "object",
        "properties": {
          "credential_config": {
            "type": "object",
            "description": "The configuration for the given credential_type.",
            "format": "kvpairs"
          },
          "credential_type": {
            "type": "string",
            "description": "The type of credential to manage. Options include: 'password', 'rsa_private_key'. Defaults to 'password'.",
            "default": "password"
          },
          "db_name": {
            "type": "string",
            "description": "Name of the database this role acts on."
          },
          "rotation_period": {
            "type": "string",
            "description": "Period for automatic credential rotation of the given username. Not valid unless used with \"username\". Mutually exclusive with \"rotation_schedule.\"",
            "format": "duration"
          },
          "rotation_schedule": {
            "type": "string",
            "description": "Schedule for automatic credential rotation of the given username. Mutually exclusive with \"rotation_period.\""
          },
          "rotation_statements": {
            "type": "array",
            "description": "Specifies the database statements to be executed to rotate the accounts credentials. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter.",
            "items": {
              "type": "string"
            }
          },
          "rotation_window": {
            "type": "string",
            "description": "The window of time in which rotations are allowed to occur starting from a given \"rotation_schedule\". Requires \"rotation_schedule\" to be specified",
            "format": "duration"
          },
          "username": {
            "type": "string",
            "description": "Name of the static user account for Vault to manage. Requires \"rotation_period\" to be specified"
          }
        }
      },
      "DecodeRequest": {
        "type": "object",
        "properties": {
          "encoded_token": {
            "type": "string",
            "description": "Specifies the encoded token (result from generate-root)."
          },
          "otp": {
            "type": "string",
            "description": "Specifies the otp code for decode."
          }
        }
      },
      "EncryptionKeyConfigureRotationRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether automatic rotation is enabled."
          },
          "interval": {
            "type": "string",
            "description": "How long after installation of an active key term that the key will be automatically rotated.",
            "format": "duration"
          },
          "max_operations": {
            "type": "integer",
            "description": "The number of encryption operations performed before the barrier key is automatically rotated.",
            "format": "int64"
          }
        }
      },
      "EncryptionKeyReadRotationConfigurationResponse": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "format": "duration"
          },
          "max_operations": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EntityBatchDeleteRequest": {
        "type": "object",
        "properties": {
          "entity_ids": {
            "type": "array",
            "description": "Entity IDs to delete",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EntityCreateAliasRequest": {
        "type": "object",
        "properties": {
          "canonical_id": {
            "type": "string",
            "description": "Entity ID to which this alias belongs"
          },
          "custom_metadata": {
            "type": "object",
            "description": "User provided key-value pairs",
            "format": "kvpairs"
          },
          "entity_id": {
            "type": "string",
            "description": "Entity ID to which this alias belongs. This field is deprecated, use canonical_id."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity alias. If set, updates the corresponding entity alias."
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this alias belongs to; unused for a modify"
          },
          "name": {
            "type": "string",
            "description": "Name of the alias; unused for a modify"
          }
        }
      },
      "EntityCreateRequest": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean",
            "description": "If set true, tokens tied to this identity will not be able to be used (but will not be revoked)."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. If set, updates the corresponding existing entity."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the entity. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "policies": {
            "type": "array",
            "description": "Policies to be tied to the entity.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EntityLookUpRequest": {
        "type": "object",
        "properties": {
          "alias_id": {
            "type": "string",
            "description": "ID of the alias."
          },
          "alias_mount_accessor": {
            "type": "string",
            "description": "Accessor of the mount to which the alias belongs to. This should be supplied in conjunction with 'alias_name'."
          },
          "alias_name": {
            "type": "string",
            "description": "Name of the alias. This should be supplied in conjunction with 'alias_mount_accessor'."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the entity."
          }
        }
      },
      "EntityMergeRequest": {
        "type": "object",
        "properties": {
          "conflicting_alias_ids_to_keep": {
            "type": "array",
            "description": "Alias IDs to keep in case of conflicting aliases. Ignored if no conflicting aliases found",
            "items": {
              "type": "string"
            }
          },
          "force": {
            "type": "boolean",
            "description": "Setting this will follow the 'mine' strategy for merging MFA secrets. If there are secrets of the same type both in entities that are merged from and in entity into which all others are getting merged, secrets in the destination will be unaltered. If not set, this API will throw an error containing all the conflicts."
          },
          "from_entity_ids": {
            "type": "array",
            "description": "Entity IDs which need to get merged",
            "items": {
              "type": "string"
            }
          },
          "to_entity_id": {
            "type": "string",
            "description": "Entity ID into which all the other entities need to get merged"
          }
        }
      },
      "EntityUpdateAliasByIdRequest": {
        "type": "object",
        "properties": {
          "canonical_id": {
            "type": "string",
            "description": "Entity ID to which this alias should be tied to"
          },
          "custom_metadata": {
            "type": "object",
            "description": "User provided key-value pairs",
            "format": "kvpairs"
          },
          "entity_id": {
            "type": "string",
            "description": "Entity ID to which this alias belongs to. This field is deprecated, use canonical_id."
          },
          "mount_accessor": {
            "type": "string",
            "description": "(Unused)"
          },
          "name": {
            "type": "string",
            "description": "(Unused)"
          }
        }
      },
      "EntityUpdateByIdRequest": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean",
            "description": "If set true, tokens tied to this identity will not be able to be used (but will not be revoked)."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the entity. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "policies": {
            "type": "array",
            "description": "Policies to be tied to the entity.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EntityUpdateByNameRequest": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean",
            "description": "If set true, tokens tied to this identity will not be able to be used (but will not be revoked)."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity. If set, updates the corresponding existing entity."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the entity. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "policies": {
            "type": "array",
            "description": "Policies to be tied to the entity.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GenerateHashRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Algorithm to use (POST body parameter). Valid values are: * sha2-224 * sha2-256 * sha2-384 * sha2-512 Defaults to \"sha2-256\".",
            "default": "sha2-256"
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"hex\".",
            "default": "hex"
          },
          "input": {
            "type": "string",
            "description": "The base64-encoded input data"
          }
        }
      },
      "GenerateHashResponse": {
        "type": "object",
        "properties": {
          "sum": {
            "type": "string"
          }
        }
      },
      "GenerateHashWithAlgorithmRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Algorithm to use (POST body parameter). Valid values are: * sha2-224 * sha2-256 * sha2-384 * sha2-512 Defaults to \"sha2-256\".",
            "default": "sha2-256"
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"hex\".",
            "default": "hex"
          },
          "input": {
            "type": "string",
            "description": "The base64-encoded input data"
          }
        }
      },
      "GenerateHashWithAlgorithmResponse": {
        "type": "object",
        "properties": {
          "sum": {
            "type": "string"
          }
        }
      },
      "GenerateRandomRequest": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "integer",
            "description": "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits).",
            "default": 32
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\".",
            "default": "base64"
          }
        }
      },
      "GenerateRandomResponse": {
        "type": "object",
        "properties": {
          "random_bytes": {
            "type": "string"
          }
        }
      },
      "GenerateRandomWithBytesRequest": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "integer",
            "description": "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits).",
            "default": 32
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\".",
            "default": "base64"
          }
        }
      },
      "GenerateRandomWithBytesResponse": {
        "type": "object",
        "properties": {
          "random_bytes": {
            "type": "string"
          }
        }
      },
      "GenerateRandomWithSourceAndBytesRequest": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "integer",
            "description": "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits).",
            "default": 32
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\".",
            "default": "base64"
          }
        }
      },
      "GenerateRandomWithSourceAndBytesResponse": {
        "type": "object",
        "properties": {
          "random_bytes": {
            "type": "string"
          }
        }
      },
      "GenerateRandomWithSourceRequest": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "integer",
            "description": "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits).",
            "default": 32
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\".",
            "default": "base64"
          }
        }
      },
      "GenerateRandomWithSourceResponse": {
        "type": "object",
        "properties": {
          "random_bytes": {
            "type": "string"
          }
        }
      },
      "GroupCreateAliasRequest": {
        "type": "object",
        "properties": {
          "canonical_id": {
            "type": "string",
            "description": "ID of the group to which this is an alias."
          },
          "id": {
            "type": "string",
            "description": "ID of the group alias."
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this alias belongs to."
          },
          "name": {
            "type": "string",
            "description": "Alias of the group."
          }
        }
      },
      "GroupCreateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the group. If set, updates the corresponding existing group."
          },
          "member_entity_ids": {
            "type": "array",
            "description": "Entity IDs to be assigned as group members.",
            "items": {
              "type": "string"
            }
          },
          "member_group_ids": {
            "type": "array",
            "description": "Group IDs to be assigned as group members.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the group. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          },
          "policies": {
            "type": "array",
            "description": "Policies to be tied to the group.",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the group, 'internal' or 'external'. Defaults to 'internal'"
          }
        }
      },
      "GroupLookUpRequest": {
        "type": "object",
        "properties": {
          "alias_id": {
            "type": "string",
            "description": "ID of the alias."
          },
          "alias_mount_accessor": {
            "type": "string",
            "description": "Accessor of the mount to which the alias belongs to. This should be supplied in conjunction with 'alias_name'."
          },
          "alias_name": {
            "type": "string",
            "description": "Name of the alias. This should be supplied in conjunction with 'alias_mount_accessor'."
          },
          "id": {
            "type": "string",
            "description": "ID of the group."
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          }
        }
      },
      "GroupUpdateAliasByIdRequest": {
        "type": "object",
        "properties": {
          "canonical_id": {
            "type": "string",
            "description": "ID of the group to which this is an alias."
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this alias belongs to."
          },
          "name": {
            "type": "string",
            "description": "Alias of the group."
          }
        }
      },
      "GroupUpdateByIdRequest": {
        "type": "object",
        "properties": {
          "member_entity_ids": {
            "type": "array",
            "description": "Entity IDs to be assigned as group members.",
            "items": {
              "type": "string"
            }
          },
          "member_group_ids": {
            "type": "array",
            "description": "Group IDs to be assigned as group members.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the group. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          },
          "policies": {
            "type": "array",
            "description": "Policies to be tied to the group.",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the group, 'internal' or 'external'. Defaults to 'internal'"
          }
        }
      },
      "GroupUpdateByNameRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the group. If set, updates the corresponding existing group."
          },
          "member_entity_ids": {
            "type": "array",
            "description": "Entity IDs to be assigned as group members.",
            "items": {
              "type": "string"
            }
          },
          "member_group_ids": {
            "type": "array",
            "description": "Group IDs to be assigned as group members.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the group. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "policies": {
            "type": "array",
            "description": "Policies to be tied to the group.",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the group, 'internal' or 'external'. Defaults to 'internal'"
          }
        }
      },
      "HaStatusResponse": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "InitializeRequest": {
        "type": "object",
        "properties": {
          "pgp_keys": {
            "type": "array",
            "description": "Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `secret_shares`.",
            "items": {
              "type": "string"
            }
          },
          "recovery_pgp_keys": {
            "type": "array",
            "description": "Specifies an array of PGP public keys used to encrypt the output recovery keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `recovery_shares`.",
            "items": {
              "type": "string"
            }
          },
          "recovery_shares": {
            "type": "integer",
            "description": "Specifies the number of shares to split the recovery key into."
          },
          "recovery_threshold": {
            "type": "integer",
            "description": "Specifies the number of shares required to reconstruct the recovery key. This must be less than or equal to `recovery_shares`."
          },
          "root_token_pgp_key": {
            "type": "string",
            "description": "Specifies a PGP public key used to encrypt the initial root token. The key must be base64-encoded from its original binary representation."
          },
          "secret_shares": {
            "type": "integer",
            "description": "Specifies the number of shares to split the unseal key into."
          },
          "secret_threshold": {
            "type": "integer",
            "description": "Specifies the number of shares required to reconstruct the unseal key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as `secret_shares`."
          },
          "stored_shares": {
            "type": "integer",
            "description": "Specifies the number of shares that should be encrypted by the HSM and stored for auto-unsealing. Currently must be the same as `secret_shares`."
          }
        }
      },
      "InternalClientActivityConfigureRequest": {
        "type": "object",
        "properties": {
          "default_report_months": {
            "type": "integer",
            "description": "Number of months to report if no start date specified.",
            "default": 12
          },
          "enabled": {
            "type": "string",
            "description": "Enable or disable collection of client count: enable, disable, or default.",
            "default": "default"
          },
          "retention_months": {
            "type": "integer",
            "description": "Number of months of client data to retain. Setting to 0 will clear all existing data.",
            "default": 24
          }
        }
      },
      "InternalCountEntitiesResponse": {
        "type": "object",
        "properties": {
          "counters": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "InternalCountTokensResponse": {
        "type": "object",
        "properties": {
          "counters": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "InternalGenerateOpenApiDocumentWithParametersRequest": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "description": "Context string appended to every operationId"
          },
          "generic_mount_paths": {
            "type": "boolean",
            "description": "Use generic mount paths",
            "default": false
          }
        }
      },
      "InternalUiListEnabledFeatureFlagsResponse": {
        "type": "object",
        "properties": {
          "feature_flags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InternalUiListEnabledVisibleMountsResponse": {
        "type": "object",
        "properties": {
          "auth": {
            "type": "object",
            "description": "auth mounts",
            "format": "map"
          },
          "secret": {
            "type": "object",
            "description": "secret mounts",
            "format": "map"
          }
        }
      },
      "InternalUiListNamespacesResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "description": "field is only returned if there are one or more namespaces",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InternalUiReadMountInformationResponse": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "format": "map"
          },
          "description": {
            "type": "string"
          },
          "external_entropy_access": {
            "type": "boolean"
          },
          "local": {
            "type": "boolean"
          },
          "options": {
            "type": "object",
            "format": "map"
          },
          "path": {
            "type": "string"
          },
          "plugin_version": {
            "type": "string"
          },
          "running_plugin_version": {
            "type": "string"
          },
          "running_sha256": {
            "type": "string"
          },
          "seal_wrap": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "InternalUiReadResultantAclResponse": {
        "type": "object",
        "properties": {
          "exact_paths": {
            "type": "object",
            "format": "map"
          },
          "glob_paths": {
            "type": "object",
            "format": "map"
          },
          "root": {
            "type": "boolean"
          }
        }
      },
      "JwtConfigureRequest": {
        "type": "object",
        "properties": {
          "bound_issuer": {
            "type": "string",
            "description": "The value against which to match the 'iss' claim in a JWT. Optional."
          },
          "default_role": {
            "type": "string",
            "description": "The default role to use if none is provided during login. If not set, a role is required during login.",
            "format": "lowercase"
          },
          "jwks_ca_pem": {
            "type": "string",
            "description": "The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used."
          },
          "jwks_url": {
            "type": "string",
            "description": "JWKS URL to use to authenticate signatures. Cannot be used with \"oidc_discovery_url\" or \"jwt_validation_pubkeys\"."
          },
          "jwt_supported_algs": {
            "type": "array",
            "description": "A list of supported signing algorithms. Defaults to RS256.",
            "items": {
              "type": "string"
            }
          },
          "jwt_validation_pubkeys": {
            "type": "array",
            "description": "A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with \"jwks_url\" or \"oidc_discovery_url\".",
            "items": {
              "type": "string"
            }
          },
          "namespace_in_state": {
            "type": "boolean",
            "description": "Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.",
            "x-vault-displayAttrs": {
              "name": "Namespace in OIDC state",
              "value": true
            }
          },
          "oidc_client_id": {
            "type": "string",
            "description": "The OAuth Client ID configured with your OIDC provider."
          },
          "oidc_client_secret": {
            "type": "string",
            "description": "The OAuth Client Secret configured with your OIDC provider.",
            "x-vault-displayAttrs": {
              "sensitive": true
            }
          },
          "oidc_discovery_ca_pem": {
            "type": "string",
            "description": "The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used."
          },
          "oidc_discovery_url": {
            "type": "string",
            "description": "OIDC Discovery URL, without any .well-known component (base path). Cannot be used with \"jwks_url\" or \"jwt_validation_pubkeys\"."
          },
          "oidc_response_mode": {
            "type": "string",
            "description": "The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'."
          },
          "oidc_response_types": {
            "type": "array",
            "description": "The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'.",
            "items": {
              "type": "string"
            }
          },
          "provider_config": {
            "type": "object",
            "description": "Provider-specific configuration. Optional.",
            "format": "map",
            "x-vault-displayAttrs": {
              "name": "Provider Config"
            }
          }
        }
      },
      "JwtLoginRequest": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "The signed JWT to validate."
          },
          "role": {
            "type": "string",
            "description": "The role to log in against.",
            "format": "lowercase"
          }
        }
      },
      "JwtOidcCallbackFormPostRequest": {
        "type": "object",
        "properties": {
          "client_nonce": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "JwtOidcRequestAuthorizationUrlRequest": {
        "type": "object",
        "properties": {
          "client_nonce": {
            "type": "string",
            "description": "Optional client-provided nonce that must match during callback, if present."
          },
          "redirect_uri": {
            "type": "string",
            "description": "The OAuth redirect_uri to use in the authorization URL."
          },
          "role": {
            "type": "string",
            "description": "The role to issue an OIDC authorization URL against.",
            "format": "lowercase"
          }
        }
      },
      "JwtWriteRoleRequest": {
        "type": "object",
        "properties": {
          "allowed_redirect_uris": {
            "type": "array",
            "description": "Comma-separated list of allowed values for redirect_uri",
            "items": {
              "type": "string"
            }
          },
          "bound_audiences": {
            "type": "array",
            "description": "Comma-separated list of 'aud' claims that are valid for login; any match is sufficient",
            "items": {
              "type": "string"
            }
          },
          "bound_cidrs": {
            "type": "array",
            "description": "Use \"token_bound_cidrs\" instead. If this and \"token_bound_cidrs\" are both specified, only \"token_bound_cidrs\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "bound_claims": {
            "type": "object",
            "description": "Map of claims/values which must match for login",
            "format": "map"
          },
          "bound_claims_type": {
            "type": "string",
            "description": "How to interpret values in the map of claims/values (which must match for login): allowed values are 'string' or 'glob'",
            "default": "string"
          },
          "bound_subject": {
            "type": "string",
            "description": "The 'sub' claim that is valid for login. Optional."
          },
          "claim_mappings": {
            "type": "object",
            "description": "Mappings of claims (key) that will be copied to a metadata field (value)",
            "format": "kvpairs"
          },
          "clock_skew_leeway": {
            "type": "string",
            "description": "Duration in seconds of leeway when validating all claims to account for clock skew. Defaults to 60 (1 minute) if set to 0 and can be disabled if set to -1.",
            "format": "duration",
            "default": 60000000000
          },
          "expiration_leeway": {
            "type": "string",
            "description": "Duration in seconds of leeway when validating expiration of a token to account for clock skew. Defaults to 150 (2.5 minutes) if set to 0 and can be disabled if set to -1.",
            "format": "duration",
            "default": 150
          },
          "groups_claim": {
            "type": "string",
            "description": "The claim to use for the Identity group alias names"
          },
          "max_age": {
            "type": "string",
            "description": "Specifies the allowable elapsed time in seconds since the last time the user was actively authenticated.",
            "format": "duration"
          },
          "max_ttl": {
            "type": "string",
            "description": "Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.",
            "format": "duration",
            "deprecated": true
          },
          "not_before_leeway": {
            "type": "string",
            "description": "Duration in seconds of leeway when validating not before values of a token to account for clock skew. Defaults to 150 (2.5 minutes) if set to 0 and can be disabled if set to -1.",
            "format": "duration",
            "default": 150
          },
          "num_uses": {
            "type": "integer",
            "description": "Use \"token_num_uses\" instead. If this and \"token_num_uses\" are both specified, only \"token_num_uses\" will be used.",
            "deprecated": true
          },
          "oidc_scopes": {
            "type": "array",
            "description": "Comma-separated list of OIDC scopes",
            "items": {
              "type": "string"
            }
          },
          "period": {
            "type": "string",
            "description": "Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.",
            "format": "duration",
            "deprecated": true
          },
          "policies": {
            "type": "array",
            "description": "Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "role_type": {
            "type": "string",
            "description": "Type of the role, either 'jwt' or 'oidc'."
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "description": "A list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "string",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_max_ttl": {
            "type": "string",
            "description": "The maximum lifetime of the generated token",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "string",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_policies": {
            "type": "array",
            "description": "Comma-separated list of policies",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Policies",
              "description": "A list of policies that will apply to the generated token for this user.",
              "group": "Tokens"
            }
          },
          "token_ttl": {
            "type": "string",
            "description": "The initial ttl of the token to generate",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Initial TTL",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          },
          "ttl": {
            "type": "string",
            "description": "Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.",
            "format": "duration",
            "deprecated": true
          },
          "user_claim": {
            "type": "string",
            "description": "The claim to use for the Identity entity alias name"
          },
          "user_claim_json_pointer": {
            "type": "boolean",
            "description": "If true, the user_claim value will use JSON pointer syntax for referencing claims."
          },
          "verbose_oidc_logging": {
            "type": "boolean",
            "description": "Log received OIDC tokens and claims when debug-level logging is active. Not recommended in production since sensitive information may be present in OIDC responses."
          }
        }
      },
      "KubernetesConfigureRequest": {
        "type": "object",
        "properties": {
          "disable_local_ca_jwt": {
            "type": "boolean",
            "description": "Disable defaulting to the local CA certificate and service account JWT when running in a Kubernetes pod.",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Disable use of local CA and service account JWT"
            }
          },
          "kubernetes_ca_cert": {
            "type": "string",
            "description": "PEM encoded CA certificate to use to verify the Kubernetes API server certificate. Defaults to the local pod's CA if found.",
            "x-vault-displayAttrs": {
              "name": "Kubernetes CA Certificate"
            }
          },
          "kubernetes_host": {
            "type": "string",
            "description": "Kubernetes API URL to connect to. Defaults to https://$KUBERNETES_SERVICE_HOST:KUBERNETES_SERVICE_PORT if those environment variables are set.",
            "x-vault-displayAttrs": {
              "name": "Kubernetes API URL"
            }
          },
          "service_account_jwt": {
            "type": "string",
            "description": "The JSON web token of the service account used by the secret engine to manage Kubernetes credentials. Defaults to the local pod's JWT if found.",
            "x-vault-displayAttrs": {
              "name": "Kubernetes API JWT"
            }
          }
        }
      },
      "KubernetesGenerateCredentialsRequest": {
        "type": "object",
        "properties": {
          "audiences": {
            "type": "array",
            "description": "The intended audiences of the generated credentials",
            "items": {
              "type": "string"
            }
          },
          "cluster_role_binding": {
            "type": "boolean",
            "description": "If true, generate a ClusterRoleBinding to grant permissions across the whole cluster instead of within a namespace. Requires the Vault role to have kubernetes_role_type set to ClusterRole."
          },
          "kubernetes_namespace": {
            "type": "string",
            "description": "The name of the Kubernetes namespace in which to generate the credentials"
          },
          "ttl": {
            "type": "string",
            "description": "The TTL of the generated credentials",
            "format": "duration"
          }
        },
        "required": [
          "kubernetes_namespace"
        ]
      },
      "KubernetesWriteRoleRequest": {
        "type": "object",
        "properties": {
          "allowed_kubernetes_namespace_selector": {
            "type": "string",
            "description": "A label selector for Kubernetes namespaces in which credentials can be generated. Accepts either a JSON or YAML object. If set with allowed_kubernetes_namespaces, the conditions are conjuncted."
          },
          "allowed_kubernetes_namespaces": {
            "type": "array",
            "description": "A list of the Kubernetes namespaces in which credentials can be generated. If set to \"*\" all namespaces are allowed.",
            "items": {
              "type": "string"
            }
          },
          "extra_annotations": {
            "type": "object",
            "description": "Additional annotations to apply to all generated Kubernetes objects.",
            "format": "kvpairs"
          },
          "extra_labels": {
            "type": "object",
            "description": "Additional labels to apply to all generated Kubernetes objects.",
            "format": "kvpairs"
          },
          "generated_role_rules": {
            "type": "string",
            "description": "The Role or ClusterRole rules to use when generating a role. Accepts either a JSON or YAML object. If set, the entire chain of Kubernetes objects will be generated."
          },
          "kubernetes_role_name": {
            "type": "string",
            "description": "The pre-existing Role or ClusterRole to bind a generated service account to. If set, Kubernetes token, service account, and role binding objects will be created."
          },
          "kubernetes_role_type": {
            "type": "string",
            "description": "Specifies whether the Kubernetes role is a Role or ClusterRole.",
            "default": "Role"
          },
          "name_template": {
            "type": "string",
            "description": "The name template to use when generating service accounts, roles and role bindings. If unset, a default template is used."
          },
          "service_account_name": {
            "type": "string",
            "description": "The pre-existing service account to generate tokens for. Mutually exclusive with all role parameters. If set, only a Kubernetes service account token will be created."
          },
          "token_default_audiences": {
            "type": "array",
            "description": "The default audiences for generated Kubernetes service account tokens. If not set or set to \"\", will use k8s cluster default.",
            "items": {
              "type": "string"
            }
          },
          "token_default_ttl": {
            "type": "string",
            "description": "The default ttl for generated Kubernetes service account tokens. If not set or set to 0, will use system default.",
            "format": "duration"
          },
          "token_max_ttl": {
            "type": "string",
            "description": "The maximum ttl for generated Kubernetes service account tokens. If not set or set to 0, will use system default.",
            "format": "duration"
          }
        }
      },
      "KvV2ConfigureRequest": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "If true, the backend will require the cas parameter to be set for each write"
          },
          "delete_version_after": {
            "type": "string",
            "description": "If set, the length of time before a version is deleted. A negative duration disables the use of delete_version_after on all keys. A zero duration clears the current setting. Accepts a Go duration format string.",
            "format": "duration"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep for each key. Defaults to 10"
          }
        }
      },
      "KvV2DeleteVersionsRequest": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "The versions to be archived. The versioned data will not be deleted, but it will no longer be returned in normal get requests.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "KvV2DestroyVersionsRequest": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "The versions to destroy. Their data will be permanently deleted.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "KvV2PatchResponse": {
        "type": "object",
        "properties": {
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "custom_metadata": {
            "type": "object",
            "format": "map"
          },
          "deletion_time": {
            "type": "string"
          },
          "destroyed": {
            "type": "boolean"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "KvV2ReadConfigurationResponse": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "If true, the backend will require the cas parameter to be set for each write"
          },
          "delete_version_after": {
            "type": "string",
            "description": "The length of time before a version is deleted.",
            "format": "duration"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep for each key."
          }
        }
      },
      "KvV2ReadMetadataResponse": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean"
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "current_version": {
            "type": "integer",
            "format": "int64"
          },
          "custom_metadata": {
            "type": "object",
            "description": "User-provided key-value pairs that are used to describe arbitrary and version-agnostic information about a secret.",
            "format": "map"
          },
          "delete_version_after": {
            "type": "string",
            "description": "The length of time before a version is deleted.",
            "format": "duration"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep",
            "format": "int64"
          },
          "oldest_version": {
            "type": "integer",
            "format": "int64"
          },
          "updated_time": {
            "type": "string",
            "format": "date-time"
          },
          "versions": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "KvV2ReadResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "format": "map"
          },
          "metadata": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "KvV2ReadSubkeysResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "format": "map"
          },
          "subkeys": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "KvV2UndeleteVersionsRequest": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "The versions to unarchive. The versions will be restored and their data will be returned on normal get requests.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "KvV2WriteMetadataRequest": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "If true the key will require the cas parameter to be set on all write requests. If false, the backend’s configuration will be used."
          },
          "custom_metadata": {
            "type": "object",
            "description": "User-provided key-value pairs that are used to describe arbitrary and version-agnostic information about a secret.",
            "format": "map"
          },
          "delete_version_after": {
            "type": "string",
            "description": "The length of time before a version is deleted. If not set, the backend's configured delete_version_after is used. Cannot be greater than the backend's delete_version_after. A zero duration clears the current setting. A negative duration will cause an error.",
            "format": "duration"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep. If not set, the backend’s configured max version is used."
          }
        }
      },
      "KvV2WriteRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "The contents of the data map will be stored and returned on read.",
            "format": "map"
          },
          "options": {
            "type": "object",
            "description": "Options for writing a KV entry. Set the \"cas\" value to use a Check-And-Set operation. If not set the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. If the index is non-zero the write will only be allowed if the key’s current version matches the version specified in the cas parameter.",
            "format": "map"
          },
          "version": {
            "type": "integer",
            "description": "If provided during a read, the value at the version number will be returned"
          }
        }
      },
      "KvV2WriteResponse": {
        "type": "object",
        "properties": {
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "custom_metadata": {
            "type": "object",
            "format": "map"
          },
          "deletion_time": {
            "type": "string"
          },
          "destroyed": {
            "type": "boolean"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LdapConfigureAuthRequest": {
        "type": "object",
        "properties": {
          "anonymous_group_search": {
            "type": "boolean",
            "description": "Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Anonymous group search"
            }
          },
          "binddn": {
            "type": "string",
            "description": "LDAP DN for searching for the user DN (optional)",
            "x-vault-displayAttrs": {
              "name": "Name of Object to bind (binddn)"
            }
          },
          "bindpass": {
            "type": "string",
            "description": "LDAP password for searching for the user DN (optional)",
            "x-vault-displayAttrs": {
              "sensitive": true
            }
          },
          "case_sensitive_names": {
            "type": "boolean",
            "description": "If true, case sensitivity will be used when comparing usernames and groups for matching policies."
          },
          "certificate": {
            "type": "string",
            "description": "CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "CA certificate",
              "editType": "file"
            }
          },
          "client_tls_cert": {
            "type": "string",
            "description": "Client certificate to provide to the LDAP server, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "Client certificate",
              "editType": "file"
            }
          },
          "client_tls_key": {
            "type": "string",
            "description": "Client certificate key to provide to the LDAP server, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "Client key",
              "editType": "file"
            }
          },
          "connection_timeout": {
            "type": "string",
            "description": "Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.",
            "format": "duration",
            "default": "30s"
          },
          "deny_null_bind": {
            "type": "boolean",
            "description": "Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true",
            "default": true
          },
          "dereference_aliases": {
            "type": "string",
            "description": "When aliases should be dereferenced on search operations. Accepted values are 'never', 'finding', 'searching', 'always'. Defaults to 'never'.",
            "enum": [
              "never",
              "finding",
              "searching",
              "always"
            ],
            "default": "never"
          },
          "discoverdn": {
            "type": "boolean",
            "description": "Use anonymous bind to discover the bind DN of a user (optional)",
            "x-vault-displayAttrs": {
              "name": "Discover DN"
            }
          },
          "groupattr": {
            "type": "string",
            "description": "LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn",
            "default": "cn",
            "x-vault-displayAttrs": {
              "name": "Group Attribute",
              "value": "cn"
            }
          },
          "groupdn": {
            "type": "string",
            "description": "LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)",
            "x-vault-displayAttrs": {
              "name": "Group DN"
            }
          },
          "groupfilter": {
            "type": "string",
            "description": "Go template for querying group membership of user (optional) The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
            "default": "(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
            "x-vault-displayAttrs": {
              "name": "Group Filter"
            }
          },
          "insecure_tls": {
            "type": "boolean",
            "description": "Skip LDAP server SSL Certificate verification - VERY insecure (optional)",
            "x-vault-displayAttrs": {
              "name": "Insecure TLS"
            }
          },
          "max_page_size": {
            "type": "integer",
            "description": "If set to a value greater than 0, the LDAP backend will use the LDAP server's paged search control to request pages of up to the given size. This can be used to avoid hitting the LDAP server's maximum result size limit. Otherwise, the LDAP backend will not use the paged search control.",
            "default": 0
          },
          "request_timeout": {
            "type": "string",
            "description": "Timeout, in seconds, for the connection when making requests against the server before returning back an error.",
            "format": "duration",
            "default": "90s"
          },
          "starttls": {
            "type": "boolean",
            "description": "Issue a StartTLS command after establishing unencrypted connection (optional)",
            "x-vault-displayAttrs": {
              "name": "Issue StartTLS"
            }
          },
          "tls_max_version": {
            "type": "string",
            "description": "Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
            "enum": [
              "tls10",
              "tls11",
              "tls12",
              "tls13"
            ],
            "default": "tls12",
            "x-vault-displayAttrs": {
              "name": "Maximum TLS Version"
            }
          },
          "tls_min_version": {
            "type": "string",
            "description": "Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
            "enum": [
              "tls10",
              "tls11",
              "tls12",
              "tls13"
            ],
            "default": "tls12",
            "x-vault-displayAttrs": {
              "name": "Minimum TLS Version"
            }
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "description": "A list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "string",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_max_ttl": {
            "type": "string",
            "description": "The maximum lifetime of the generated token",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "string",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_policies": {
            "type": "array",
            "description": "Comma-separated list of policies. This will apply to all tokens generated by this auth method, in addition to any configured for specific users/groups.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Policies",
              "description": "A list of policies that will apply to the generated token for this user.",
              "group": "Tokens"
            }
          },
          "token_ttl": {
            "type": "string",
            "description": "The initial ttl of the token to generate",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Initial TTL",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          },
          "upndomain": {
            "type": "string",
            "description": "Enables userPrincipalDomain login with [username]@UPNDomain (optional)",
            "x-vault-displayAttrs": {
              "name": "User Principal (UPN) Domain"
            }
          },
          "url": {
            "type": "string",
            "description": "LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.",
            "default": "ldap://127.0.0.1",
            "x-vault-displayAttrs": {
              "name": "URL"
            }
          },
          "use_pre111_group_cn_behavior": {
            "type": "boolean",
            "description": "In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations."
          },
          "use_token_groups": {
            "type": "boolean",
            "description": "If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.",
            "default": false
          },
          "userattr": {
            "type": "string",
            "description": "Attribute used for users (default: cn)",
            "default": "cn",
            "x-vault-displayAttrs": {
              "name": "User Attribute",
              "value": "cn"
            }
          },
          "userdn": {
            "type": "string",
            "description": "LDAP domain to use for users (eg: ou=People,dc=example,dc=org)",
            "x-vault-displayAttrs": {
              "name": "User DN"
            }
          },
          "userfilter": {
            "type": "string",
            "description": "Go template for LDAP user search filer (optional) The template can access the following context variables: UserAttr, Username Default: ({{.UserAttr}}={{.Username}})",
            "default": "({{.UserAttr}}={{.Username}})",
            "x-vault-displayAttrs": {
              "name": "User Search Filter"
            }
          },
          "username_as_alias": {
            "type": "boolean",
            "description": "If true, sets the alias name to the username",
            "default": false
          }
        }
      },
      "LdapConfigureRequest": {
        "type": "object",
        "properties": {
          "anonymous_group_search": {
            "type": "boolean",
            "description": "Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Anonymous group search"
            }
          },
          "binddn": {
            "type": "string",
            "description": "LDAP DN for searching for the user DN (optional)",
            "x-vault-displayAttrs": {
              "name": "Name of Object to bind (binddn)"
            }
          },
          "bindpass": {
            "type": "string",
            "description": "LDAP password for searching for the user DN (optional)",
            "x-vault-displayAttrs": {
              "sensitive": true
            }
          },
          "case_sensitive_names": {
            "type": "boolean",
            "description": "If true, case sensitivity will be used when comparing usernames and groups for matching policies."
          },
          "certificate": {
            "type": "string",
            "description": "CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "CA certificate",
              "editType": "file"
            }
          },
          "client_tls_cert": {
            "type": "string",
            "description": "Client certificate to provide to the LDAP server, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "Client certificate",
              "editType": "file"
            }
          },
          "client_tls_key": {
            "type": "string",
            "description": "Client certificate key to provide to the LDAP server, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "Client key",
              "editType": "file"
            }
          },
          "connection_timeout": {
            "type": "string",
            "description": "Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.",
            "format": "duration",
            "default": "30s"
          },
          "deny_null_bind": {
            "type": "boolean",
            "description": "Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true",
            "default": true
          },
          "dereference_aliases": {
            "type": "string",
            "description": "When aliases should be dereferenced on search operations. Accepted values are 'never', 'finding', 'searching', 'always'. Defaults to 'never'.",
            "enum": [
              "never",
              "finding",
              "searching",
              "always"
            ],
            "default": "never"
          },
          "discoverdn": {
            "type": "boolean",
            "description": "Use anonymous bind to discover the bind DN of a user (optional)",
            "x-vault-displayAttrs": {
              "name": "Discover DN"
            }
          },
          "groupattr": {
            "type": "string",
            "description": "LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn",
            "default": "cn",
            "x-vault-displayAttrs": {
              "name": "Group Attribute",
              "value": "cn"
            }
          },
          "groupdn": {
            "type": "string",
            "description": "LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)",
            "x-vault-displayAttrs": {
              "name": "Group DN"
            }
          },
          "groupfilter": {
            "type": "string",
            "description": "Go template for querying group membership of user (optional) The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
            "default": "(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
            "x-vault-displayAttrs": {
              "name": "Group Filter"
            }
          },
          "insecure_tls": {
            "type": "boolean",
            "description": "Skip LDAP server SSL Certificate verification - VERY insecure (optional)",
            "x-vault-displayAttrs": {
              "name": "Insecure TLS"
            }
          },
          "length": {
            "type": "integer",
            "description": "The desired length of passwords that Vault generates.",
            "deprecated": true
          },
          "max_page_size": {
            "type": "integer",
            "description": "If set to a value greater than 0, the LDAP backend will use the LDAP server's paged search control to request pages of up to the given size. This can be used to avoid hitting the LDAP server's maximum result size limit. Otherwise, the LDAP backend will not use the paged search control.",
            "default": 0
          },
          "max_ttl": {
            "type": "string",
            "description": "The maximum password time-to-live.",
            "format": "duration"
          },
          "password_policy": {
            "type": "string",
            "description": "Password policy to use to generate passwords"
          },
          "request_timeout": {
            "type": "string",
            "description": "Timeout, in seconds, for the connection when making requests against the server before returning back an error.",
            "format": "duration",
            "default": "90s"
          },
          "schema": {
            "type": "string",
            "description": "The desired LDAP schema used when modifying user account passwords.",
            "default": "openldap"
          },
          "starttls": {
            "type": "boolean",
            "description": "Issue a StartTLS command after establishing unencrypted connection (optional)",
            "x-vault-displayAttrs": {
              "name": "Issue StartTLS"
            }
          },
          "tls_max_version": {
            "type": "string",
            "description": "Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
            "enum": [
              "tls10",
              "tls11",
              "tls12",
              "tls13"
            ],
            "default": "tls12",
            "x-vault-displayAttrs": {
              "name": "Maximum TLS Version"
            }
          },
          "tls_min_version": {
            "type": "string",
            "description": "Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
            "enum": [
              "tls10",
              "tls11",
              "tls12",
              "tls13"
            ],
            "default": "tls12",
            "x-vault-displayAttrs": {
              "name": "Minimum TLS Version"
            }
          },
          "ttl": {
            "type": "string",
            "description": "The default password time-to-live.",
            "format": "duration"
          },
          "upndomain": {
            "type": "string",
            "description": "Enables userPrincipalDomain login with [username]@UPNDomain (optional)",
            "x-vault-displayAttrs": {
              "name": "User Principal (UPN) Domain"
            }
          },
          "url": {
            "type": "string",
            "description": "LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.",
            "default": "ldap://127.0.0.1",
            "x-vault-displayAttrs": {
              "name": "URL"
            }
          },
          "use_pre111_group_cn_behavior": {
            "type": "boolean",
            "description": "In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations."
          },
          "use_token_groups": {
            "type": "boolean",
            "description": "If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.",
            "default": false
          },
          "userattr": {
            "type": "string",
            "description": "Attribute used for users (default: cn)",
            "default": "cn",
            "x-vault-displayAttrs": {
              "name": "User Attribute",
              "value": "cn"
            }
          },
          "userdn": {
            "type": "string",
            "description": "LDAP domain to use for users (eg: ou=People,dc=example,dc=org)",
            "x-vault-displayAttrs": {
              "name": "User DN"
            }
          },
          "userfilter": {
            "type": "string",
            "description": "Go template for LDAP user search filer (optional) The template can access the following context variables: UserAttr, Username Default: ({{.UserAttr}}={{.Username}})",
            "default": "({{.UserAttr}}={{.Username}})",
            "x-vault-displayAttrs": {
              "name": "User Search Filter"
            }
          },
          "username_as_alias": {
            "type": "boolean",
            "description": "If true, sets the alias name to the username",
            "default": false
          }
        }
      },
      "LdapLibraryCheckInRequest": {
        "type": "object",
        "properties": {
          "service_account_names": {
            "type": "array",
            "description": "The username/logon name for the service accounts to check in.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LdapLibraryCheckOutRequest": {
        "type": "object",
        "properties": {
          "ttl": {
            "type": "string",
            "description": "The length of time before the check-out will expire, in seconds.",
            "format": "duration"
          }
        }
      },
      "LdapLibraryConfigureRequest": {
        "type": "object",
        "properties": {
          "disable_check_in_enforcement": {
            "type": "boolean",
            "description": "Disable the default behavior of requiring that check-ins are performed by the entity that checked them out.",
            "default": false
          },
          "max_ttl": {
            "type": "string",
            "description": "In seconds, the max amount of time a check-out's renewals should last. Defaults to 24 hours.",
            "format": "duration",
            "default": 86400
          },
          "service_account_names": {
            "type": "array",
            "description": "The username/logon name for the service accounts with which this set will be associated.",
            "items": {
              "type": "string"
            }
          },
          "ttl": {
            "type": "string",
            "description": "In seconds, the amount of time a check-out should last. Defaults to 24 hours.",
            "format": "duration",
            "default": 86400
          }
        }
      },
      "LdapLibraryForceCheckInRequest": {
        "type": "object",
        "properties": {
          "service_account_names": {
            "type": "array",
            "description": "The username/logon name for the service accounts to check in.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LdapLoginRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password for this user."
          }
        }
      },
      "LdapWriteDynamicRoleRequest": {
        "type": "object",
        "properties": {
          "creation_ldif": {
            "type": "string",
            "description": "LDIF string used to create new entities within the LDAP system. This LDIF can be templated."
          },
          "default_ttl": {
            "type": "string",
            "description": "Default TTL for dynamic credentials",
            "format": "duration"
          },
          "deletion_ldif": {
            "type": "string",
            "description": "LDIF string used to delete entities created within the LDAP system. This LDIF can be templated."
          },
          "max_ttl": {
            "type": "string",
            "description": "Max TTL a dynamic credential can be extended to",
            "format": "duration"
          },
          "rollback_ldif": {
            "type": "string",
            "description": "LDIF string used to rollback changes in the event of a failure to create credentials. This LDIF can be templated."
          },
          "username_template": {
            "type": "string",
            "description": "The template used to create a username"
          }
        },
        "required": [
          "creation_ldif",
          "deletion_ldif"
        ]
      },
      "LdapWriteGroupRequest": {
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "description": "Comma-separated list of policies associated to the group.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "description": "A list of policies associated to the group."
            }
          }
        }
      },
      "LdapWriteStaticRoleRequest": {
        "type": "object",
        "properties": {
          "dn": {
            "type": "string",
            "description": "The distinguished name of the entry to manage."
          },
          "rotation_period": {
            "type": "string",
            "description": "Period for automatic credential rotation of the given entry.",
            "format": "duration"
          },
          "username": {
            "type": "string",
            "description": "The username/logon name for the entry with which this role will be associated."
          }
        }
      },
      "LdapWriteUserRequest": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "Comma-separated list of additional groups associated with the user.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "description": "A list of additional groups associated with the user."
            }
          },
          "policies": {
            "type": "array",
            "description": "Comma-separated list of policies associated with the user.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "description": "A list of policies associated with the user."
            }
          }
        }
      },
      "LeaderStatusResponse": {
        "type": "object",
        "properties": {
          "active_time": {
            "type": "string",
            "format": "date-time"
          },
          "ha_enabled": {
            "type": "boolean"
          },
          "is_self": {
            "type": "boolean"
          },
          "last_wal": {
            "type": "integer",
            "format": "int64"
          },
          "leader_address": {
            "type": "string"
          },
          "leader_cluster_address": {
            "type": "string"
          },
          "performance_standby": {
            "type": "boolean"
          },
          "performance_standby_last_remote_wal": {
            "type": "integer",
            "format": "int64"
          },
          "raft_applied_index": {
            "type": "integer",
            "format": "int64"
          },
          "raft_committed_index": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LeasesCountResponse": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "integer",
            "description": "Number of matching leases per mount"
          },
          "lease_count": {
            "type": "integer",
            "description": "Number of matching leases"
          }
        }
      },
      "LeasesListResponse": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "integer",
            "description": "Number of matching leases per mount"
          },
          "lease_count": {
            "type": "integer",
            "description": "Number of matching leases"
          }
        }
      },
      "LeasesLookUpResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "description": "A list of lease ids",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LeasesReadLeaseRequest": {
        "type": "object",
        "properties": {
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          }
        }
      },
      "LeasesReadLeaseResponse": {
        "type": "object",
        "properties": {
          "expire_time": {
            "type": "string",
            "description": "Optional lease expiry time",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Lease id"
          },
          "issue_time": {
            "type": "string",
            "description": "Timestamp for the lease's issue time",
            "format": "date-time"
          },
          "last_renewal": {
            "type": "string",
            "description": "Optional Timestamp of the last time the lease was renewed",
            "format": "date-time"
          },
          "renewable": {
            "type": "boolean",
            "description": "True if the lease is able to be renewed"
          },
          "ttl": {
            "type": "integer",
            "description": "Time to Live set for the lease, returns 0 if unset"
          }
        }
      },
      "LeasesRenewLease2Request": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the lease",
            "format": "duration"
          },
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          }
        }
      },
      "LeasesRenewLeaseRequest": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the lease",
            "format": "duration"
          },
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          }
        }
      },
      "LeasesRenewLeaseWithId2Request": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the lease",
            "format": "duration"
          },
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          }
        }
      },
      "LeasesRenewLeaseWithIdRequest": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the lease",
            "format": "duration"
          },
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          }
        }
      },
      "LeasesRevokeLease2Request": {
        "type": "object",
        "properties": {
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          },
          "sync": {
            "type": "boolean",
            "description": "Whether or not to perform the revocation synchronously",
            "default": true
          }
        }
      },
      "LeasesRevokeLeaseRequest": {
        "type": "object",
        "properties": {
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          },
          "sync": {
            "type": "boolean",
            "description": "Whether or not to perform the revocation synchronously",
            "default": true
          }
        }
      },
      "LeasesRevokeLeaseWithId2Request": {
        "type": "object",
        "properties": {
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          },
          "sync": {
            "type": "boolean",
            "description": "Whether or not to perform the revocation synchronously",
            "default": true
          }
        }
      },
      "LeasesRevokeLeaseWithIdRequest": {
        "type": "object",
        "properties": {
          "lease_id": {
            "type": "string",
            "description": "The lease identifier to renew. This is included with a lease."
          },
          "sync": {
            "type": "boolean",
            "description": "Whether or not to perform the revocation synchronously",
            "default": true
          }
        }
      },
      "LeasesRevokeLeaseWithPrefix2Request": {
        "type": "object",
        "properties": {
          "sync": {
            "type": "boolean",
            "description": "Whether or not to perform the revocation synchronously",
            "default": true
          }
        }
      },
      "LeasesRevokeLeaseWithPrefixRequest": {
        "type": "object",
        "properties": {
          "sync": {
            "type": "boolean",
            "description": "Whether or not to perform the revocation synchronously",
            "default": true
          }
        }
      },
      "LoggersUpdateVerbosityLevelForRequest": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Log verbosity level. Supported values (in order of detail) are \"trace\", \"debug\", \"info\", \"warn\", and \"error\"."
          }
        }
      },
      "LoggersUpdateVerbosityLevelRequest": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Log verbosity level. Supported values (in order of detail) are \"trace\", \"debug\", \"info\", \"warn\", and \"error\"."
          }
        }
      },
      "MfaAdminDestroyTotpSecretRequest": {
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "string",
            "description": "Identifier of the entity from which the MFA method secret needs to be removed."
          },
          "method_id": {
            "type": "string",
            "description": "The unique identifier for this MFA method."
          }
        },
        "required": [
          "entity_id",
          "method_id"
        ]
      },
      "MfaAdminGenerateTotpSecretRequest": {
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "string",
            "description": "Entity ID on which the generated secret needs to get stored."
          },
          "method_id": {
            "type": "string",
            "description": "The unique identifier for this MFA method."
          }
        },
        "required": [
          "entity_id",
          "method_id"
        ]
      },
      "MfaCreateDuoMethodRequest": {
        "type": "object",
        "properties": {
          "api_hostname": {
            "type": "string",
            "description": "API host name for Duo."
          },
          "integration_key": {
            "type": "string",
            "description": "Integration key for Duo."
          },
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "push_info": {
            "type": "string",
            "description": "Push information for Duo."
          },
          "secret_key": {
            "type": "string",
            "description": "Secret key for Duo."
          },
          "use_passcode": {
            "type": "boolean",
            "description": "If true, the user is reminded to use the passcode upon MFA validation. This option does not enforce using the passcode. Defaults to false."
          },
          "username_format": {
            "type": "string",
            "description": "A template string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is."
          }
        }
      },
      "MfaCreateOktaMethodRequest": {
        "type": "object",
        "properties": {
          "api_token": {
            "type": "string",
            "description": "Okta API key."
          },
          "base_url": {
            "type": "string",
            "description": "The base domain to use for the Okta API. When not specified in the configuration, \"okta.com\" is used."
          },
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "org_name": {
            "type": "string",
            "description": "Name of the organization to be used in the Okta API."
          },
          "primary_email": {
            "type": "boolean",
            "description": "If true, the username will only match the primary email for the account. Defaults to false."
          },
          "production": {
            "type": "boolean",
            "description": "(DEPRECATED) Use base_url instead."
          },
          "username_format": {
            "type": "string",
            "description": "A template string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, \"{{entity.name}}@example.com\". If blank, the Entity's name field will be used as-is."
          }
        }
      },
      "MfaCreatePingIdMethodRequest": {
        "type": "object",
        "properties": {
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "settings_file_base64": {
            "type": "string",
            "description": "The settings file provided by Ping, Base64-encoded. This must be a settings file suitable for third-party clients, not the PingID SDK or PingFederate."
          },
          "username_format": {
            "type": "string",
            "description": "A template string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is."
          }
        }
      },
      "MfaCreateTotpMethodRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "The hashing algorithm used to generate the TOTP token. Options include SHA1, SHA256 and SHA512.",
            "default": "SHA1"
          },
          "digits": {
            "type": "integer",
            "description": "The number of digits in the generated TOTP token. This value can either be 6 or 8.",
            "default": 6
          },
          "issuer": {
            "type": "string",
            "description": "The name of the key's issuing organization."
          },
          "key_size": {
            "type": "integer",
            "description": "Determines the size in bytes of the generated key.",
            "default": 20
          },
          "max_validation_attempts": {
            "type": "integer",
            "description": "Max number of allowed validation attempts."
          },
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "period": {
            "type": "string",
            "description": "The length of time used to generate a counter for the TOTP token calculation.",
            "format": "duration",
            "default": 30
          },
          "qr_size": {
            "type": "integer",
            "description": "The pixel size of the generated square QR code.",
            "default": 200
          },
          "skew": {
            "type": "integer",
            "description": "The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.",
            "default": 1
          }
        }
      },
      "MfaGenerateTotpSecretRequest": {
        "type": "object",
        "properties": {
          "method_id": {
            "type": "string",
            "description": "The unique identifier for this MFA method."
          }
        },
        "required": [
          "method_id"
        ]
      },
      "MfaUpdateDuoMethodRequest": {
        "type": "object",
        "properties": {
          "api_hostname": {
            "type": "string",
            "description": "API host name for Duo."
          },
          "integration_key": {
            "type": "string",
            "description": "Integration key for Duo."
          },
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "push_info": {
            "type": "string",
            "description": "Push information for Duo."
          },
          "secret_key": {
            "type": "string",
            "description": "Secret key for Duo."
          },
          "use_passcode": {
            "type": "boolean",
            "description": "If true, the user is reminded to use the passcode upon MFA validation. This option does not enforce using the passcode. Defaults to false."
          },
          "username_format": {
            "type": "string",
            "description": "A template string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is."
          }
        }
      },
      "MfaUpdateOktaMethodRequest": {
        "type": "object",
        "properties": {
          "api_token": {
            "type": "string",
            "description": "Okta API key."
          },
          "base_url": {
            "type": "string",
            "description": "The base domain to use for the Okta API. When not specified in the configuration, \"okta.com\" is used."
          },
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "org_name": {
            "type": "string",
            "description": "Name of the organization to be used in the Okta API."
          },
          "primary_email": {
            "type": "boolean",
            "description": "If true, the username will only match the primary email for the account. Defaults to false."
          },
          "production": {
            "type": "boolean",
            "description": "(DEPRECATED) Use base_url instead."
          },
          "username_format": {
            "type": "string",
            "description": "A template string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, \"{{entity.name}}@example.com\". If blank, the Entity's name field will be used as-is."
          }
        }
      },
      "MfaUpdatePingIdMethodRequest": {
        "type": "object",
        "properties": {
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "settings_file_base64": {
            "type": "string",
            "description": "The settings file provided by Ping, Base64-encoded. This must be a settings file suitable for third-party clients, not the PingID SDK or PingFederate."
          },
          "username_format": {
            "type": "string",
            "description": "A template string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is."
          }
        }
      },
      "MfaUpdateTotpMethodRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "The hashing algorithm used to generate the TOTP token. Options include SHA1, SHA256 and SHA512.",
            "default": "SHA1"
          },
          "digits": {
            "type": "integer",
            "description": "The number of digits in the generated TOTP token. This value can either be 6 or 8.",
            "default": 6
          },
          "issuer": {
            "type": "string",
            "description": "The name of the key's issuing organization."
          },
          "key_size": {
            "type": "integer",
            "description": "Determines the size in bytes of the generated key.",
            "default": 20
          },
          "max_validation_attempts": {
            "type": "integer",
            "description": "Max number of allowed validation attempts."
          },
          "method_name": {
            "type": "string",
            "description": "The unique name identifier for this MFA method."
          },
          "period": {
            "type": "string",
            "description": "The length of time used to generate a counter for the TOTP token calculation.",
            "format": "duration",
            "default": 30
          },
          "qr_size": {
            "type": "integer",
            "description": "The pixel size of the generated square QR code.",
            "default": 200
          },
          "skew": {
            "type": "integer",
            "description": "The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.",
            "default": 1
          }
        }
      },
      "MfaValidateRequest": {
        "type": "object",
        "properties": {
          "mfa_payload": {
            "type": "object",
            "description": "A map from MFA method ID to a slice of passcodes or an empty slice if the method does not use passcodes",
            "format": "map"
          },
          "mfa_request_id": {
            "type": "string",
            "description": "ID for this MFA request"
          }
        },
        "required": [
          "mfa_payload",
          "mfa_request_id"
        ]
      },
      "MfaWriteLoginEnforcementRequest": {
        "type": "object",
        "properties": {
          "auth_method_accessors": {
            "type": "array",
            "description": "Array of auth mount accessor IDs",
            "items": {
              "type": "string"
            }
          },
          "auth_method_types": {
            "type": "array",
            "description": "Array of auth mount types",
            "items": {
              "type": "string"
            }
          },
          "identity_entity_ids": {
            "type": "array",
            "description": "Array of identity entity IDs",
            "items": {
              "type": "string"
            }
          },
          "identity_group_ids": {
            "type": "array",
            "description": "Array of identity group IDs",
            "items": {
              "type": "string"
            }
          },
          "mfa_method_ids": {
            "type": "array",
            "description": "Array of Method IDs that determine what methods will be enforced",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "mfa_method_ids"
        ]
      },
      "MountsEnableSecretsEngineRequest": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "description": "Configuration for this mount, such as default_lease_ttl and max_lease_ttl.",
            "format": "map"
          },
          "description": {
            "type": "string",
            "description": "User-friendly description for this mount."
          },
          "external_entropy_access": {
            "type": "boolean",
            "description": "Whether to give the mount access to Vault's external entropy.",
            "default": false
          },
          "local": {
            "type": "boolean",
            "description": "Mark the mount as a local mount, which is not replicated and is unaffected by replication.",
            "default": false
          },
          "options": {
            "type": "object",
            "description": "The options to pass into the backend. Should be a json object with string keys and values.",
            "format": "kvpairs"
          },
          "plugin_name": {
            "type": "string",
            "description": "Name of the plugin to mount based from the name registered in the plugin catalog."
          },
          "plugin_version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          },
          "seal_wrap": {
            "type": "boolean",
            "description": "Whether to turn on seal wrapping for the mount.",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "The type of the backend. Example: \"passthrough\""
          }
        }
      },
      "MountsReadConfigurationResponse": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "description": "Configuration for this mount, such as default_lease_ttl and max_lease_ttl.",
            "format": "map"
          },
          "deprecation_status": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "User-friendly description for this mount."
          },
          "external_entropy_access": {
            "type": "boolean"
          },
          "local": {
            "type": "boolean",
            "description": "Mark the mount as a local mount, which is not replicated and is unaffected by replication.",
            "default": false
          },
          "options": {
            "type": "object",
            "description": "The options to pass into the backend. Should be a json object with string keys and values.",
            "format": "kvpairs"
          },
          "plugin_version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          },
          "running_plugin_version": {
            "type": "string"
          },
          "running_sha256": {
            "type": "string"
          },
          "seal_wrap": {
            "type": "boolean",
            "description": "Whether to turn on seal wrapping for the mount.",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "The type of the backend. Example: \"passthrough\""
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "MountsReadTuningInformationResponse": {
        "type": "object",
        "properties": {
          "allowed_managed_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_response_headers": {
            "type": "array",
            "description": "A list of headers to whitelist and allow a plugin to set on responses.",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_request_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_response_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_lease_ttl": {
            "type": "integer",
            "description": "The default lease TTL for this mount."
          },
          "description": {
            "type": "string",
            "description": "User-friendly description for this credential backend."
          },
          "external_entropy_access": {
            "type": "boolean"
          },
          "force_no_cache": {
            "type": "boolean"
          },
          "listing_visibility": {
            "type": "string"
          },
          "max_lease_ttl": {
            "type": "integer",
            "description": "The max lease TTL for this mount."
          },
          "options": {
            "type": "object",
            "description": "The options to pass into the backend. Should be a json object with string keys and values.",
            "format": "kvpairs"
          },
          "passthrough_request_headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "plugin_version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to issue (service or batch)."
          },
          "user_lockout_counter_reset_duration": {
            "type": "integer",
            "format": "int64"
          },
          "user_lockout_disable": {
            "type": "boolean"
          },
          "user_lockout_duration": {
            "type": "integer",
            "format": "int64"
          },
          "user_lockout_threshold": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MountsTuneConfigurationParametersRequest": {
        "type": "object",
        "properties": {
          "allowed_managed_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_response_headers": {
            "type": "array",
            "description": "A list of headers to whitelist and allow a plugin to set on responses.",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_request_keys": {
            "type": "array",
            "description": "The list of keys in the request data object that will not be HMAC'ed by audit devices.",
            "items": {
              "type": "string"
            }
          },
          "audit_non_hmac_response_keys": {
            "type": "array",
            "description": "The list of keys in the response data object that will not be HMAC'ed by audit devices.",
            "items": {
              "type": "string"
            }
          },
          "default_lease_ttl": {
            "type": "string",
            "description": "The default lease TTL for this mount."
          },
          "description": {
            "type": "string",
            "description": "User-friendly description for this credential backend."
          },
          "listing_visibility": {
            "type": "string",
            "description": "Determines the visibility of the mount in the UI-specific listing endpoint. Accepted value are 'unauth' and 'hidden', with the empty default ('') behaving like 'hidden'."
          },
          "max_lease_ttl": {
            "type": "string",
            "description": "The max lease TTL for this mount."
          },
          "options": {
            "type": "object",
            "description": "The options to pass into the backend. Should be a json object with string keys and values.",
            "format": "kvpairs"
          },
          "passthrough_request_headers": {
            "type": "array",
            "description": "A list of headers to whitelist and pass from the request to the plugin.",
            "items": {
              "type": "string"
            }
          },
          "plugin_version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to issue (service or batch)."
          },
          "user_lockout_config": {
            "type": "object",
            "description": "The user lockout configuration to pass into the backend. Should be a json object with string keys and values.",
            "format": "map"
          }
        }
      },
      "OidcConfigureRequest": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string",
            "description": "Issuer URL to be used in the iss claim of the token. If not set, Vault's app_addr will be used."
          }
        }
      },
      "OidcIntrospectRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Optional client_id to verify"
          },
          "token": {
            "type": "string",
            "description": "Token to verify"
          }
        }
      },
      "OidcProviderAuthorizeWithParametersRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The ID of the requesting client."
          },
          "code_challenge": {
            "type": "string",
            "description": "The code challenge derived from the code verifier."
          },
          "code_challenge_method": {
            "type": "string",
            "description": "The method that was used to derive the code challenge. The following methods are supported: 'S256', 'plain'. Defaults to 'plain'.",
            "default": "plain"
          },
          "max_age": {
            "type": "integer",
            "description": "The allowable elapsed time in seconds since the last time the end-user was actively authenticated."
          },
          "nonce": {
            "type": "string",
            "description": "The value that will be returned in the ID token nonce claim after a token exchange."
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirection URI to which the response will be sent."
          },
          "response_type": {
            "type": "string",
            "description": "The OIDC authentication flow to be used. The following response types are supported: 'code'"
          },
          "scope": {
            "type": "string",
            "description": "A space-delimited, case-sensitive list of scopes to be requested. The 'openid' scope is required."
          },
          "state": {
            "type": "string",
            "description": "The value used to maintain state between the authentication request and client."
          }
        },
        "required": [
          "client_id",
          "redirect_uri",
          "response_type",
          "scope"
        ]
      },
      "OidcProviderTokenRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The ID of the requesting client."
          },
          "client_secret": {
            "type": "string",
            "description": "The secret of the requesting client."
          },
          "code": {
            "type": "string",
            "description": "The authorization code received from the provider's authorization endpoint."
          },
          "code_verifier": {
            "type": "string",
            "description": "The code verifier associated with the authorization code."
          },
          "grant_type": {
            "type": "string",
            "description": "The authorization grant type. The following grant types are supported: 'authorization_code'."
          },
          "redirect_uri": {
            "type": "string",
            "description": "The callback location where the authentication response was sent."
          }
        },
        "required": [
          "code",
          "grant_type",
          "redirect_uri"
        ]
      },
      "OidcRotateKeyRequest": {
        "type": "object",
        "properties": {
          "verification_ttl": {
            "type": "string",
            "description": "Controls how long the public portion of a key will be available for verification after being rotated. Setting verification_ttl here will override the verification_ttl set on the key.",
            "format": "duration"
          }
        }
      },
      "OidcWriteAssignmentRequest": {
        "type": "object",
        "properties": {
          "entity_ids": {
            "type": "array",
            "description": "Comma separated string or array of identity entity IDs",
            "items": {
              "type": "string"
            }
          },
          "group_ids": {
            "type": "array",
            "description": "Comma separated string or array of identity group IDs",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OidcWriteClientRequest": {
        "type": "object",
        "properties": {
          "access_token_ttl": {
            "type": "string",
            "description": "The time-to-live for access tokens obtained by the client.",
            "format": "duration",
            "default": "24h"
          },
          "assignments": {
            "type": "array",
            "description": "Comma separated string or array of assignment resources.",
            "items": {
              "type": "string"
            }
          },
          "client_type": {
            "type": "string",
            "description": "The client type based on its ability to maintain confidentiality of credentials. The following client types are supported: 'confidential', 'public'. Defaults to 'confidential'.",
            "default": "confidential"
          },
          "id_token_ttl": {
            "type": "string",
            "description": "The time-to-live for ID tokens obtained by the client.",
            "format": "duration",
            "default": "24h"
          },
          "key": {
            "type": "string",
            "description": "A reference to a named key resource. Cannot be modified after creation. Defaults to the 'default' key.",
            "default": "default"
          },
          "redirect_uris": {
            "type": "array",
            "description": "Comma separated string or array of redirect URIs used by the client. One of these values must exactly match the redirect_uri parameter value used in each authentication request.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OidcWriteKeyRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Signing algorithm to use. This will default to RS256.",
            "default": "RS256"
          },
          "allowed_client_ids": {
            "type": "array",
            "description": "Comma separated string or array of role client ids allowed to use this key for signing. If empty no roles are allowed. If \"*\" all roles are allowed.",
            "items": {
              "type": "string"
            }
          },
          "rotation_period": {
            "type": "string",
            "description": "How often to generate a new keypair.",
            "format": "duration",
            "default": "24h"
          },
          "verification_ttl": {
            "type": "string",
            "description": "Controls how long the public portion of a key will be available for verification after being rotated.",
            "format": "duration",
            "default": "24h"
          }
        }
      },
      "OidcWriteProviderRequest": {
        "type": "object",
        "properties": {
          "allowed_client_ids": {
            "type": "array",
            "description": "The client IDs that are permitted to use the provider",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string",
            "description": "Specifies what will be used for the iss claim of ID tokens."
          },
          "scopes_supported": {
            "type": "array",
            "description": "The scopes supported for requesting on the provider",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OidcWriteRoleRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Optional client_id"
          },
          "key": {
            "type": "string",
            "description": "The OIDC key to use for generating tokens. The specified key must already exist."
          },
          "template": {
            "type": "string",
            "description": "The template string to use for generating tokens. This may be in string-ified JSON or base64 format."
          },
          "ttl": {
            "type": "string",
            "description": "TTL of the tokens generated against the role.",
            "format": "duration",
            "default": "24h"
          }
        },
        "required": [
          "key"
        ]
      },
      "OidcWriteScopeRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the scope"
          },
          "template": {
            "type": "string",
            "description": "The template string to use for the scope. This may be in string-ified JSON or base64 format."
          }
        }
      },
      "PersonaCreateRequest": {
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "string",
            "description": "Entity ID to which this persona belongs to"
          },
          "id": {
            "type": "string",
            "description": "ID of the persona"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the persona. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this persona belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the persona"
          }
        }
      },
      "PersonaUpdateByIdRequest": {
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "string",
            "description": "Entity ID to which this persona should be tied to"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to be associated with the persona. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2",
            "format": "kvpairs"
          },
          "mount_accessor": {
            "type": "string",
            "description": "Mount accessor to which this persona belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the persona"
          }
        }
      },
      "PluginsCatalogListPluginsResponse": {
        "type": "object",
        "properties": {
          "detailed": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "PluginsCatalogListPluginsWithTypeResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "description": "List of plugin names in the catalog",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PluginsCatalogReadPluginConfigurationResponse": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "description": "The args passed to plugin command.",
            "items": {
              "type": "string"
            }
          },
          "builtin": {
            "type": "boolean"
          },
          "command": {
            "type": "string",
            "description": "The command used to start the plugin. The executable defined in this command must exist in vault's plugin directory."
          },
          "deprecation_status": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the plugin"
          },
          "oci_image": {
            "type": "string"
          },
          "runtime": {
            "type": "string",
            "description": "The Vault plugin runtime to use when running the plugin."
          },
          "sha256": {
            "type": "string",
            "description": "The SHA256 sum of the executable or container to be run. This should be HEX encoded."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          }
        }
      },
      "PluginsCatalogReadPluginConfigurationWithTypeResponse": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "description": "The args passed to plugin command.",
            "items": {
              "type": "string"
            }
          },
          "builtin": {
            "type": "boolean"
          },
          "command": {
            "type": "string",
            "description": "The command used to start the plugin. The executable defined in this command must exist in vault's plugin directory."
          },
          "deprecation_status": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the plugin"
          },
          "oci_image": {
            "type": "string"
          },
          "runtime": {
            "type": "string",
            "description": "The Vault plugin runtime to use when running the plugin."
          },
          "sha256": {
            "type": "string",
            "description": "The SHA256 sum of the executable or container to be run. This should be HEX encoded."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          }
        }
      },
      "PluginsCatalogRegisterPluginRequest": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "description": "The args passed to plugin command.",
            "items": {
              "type": "string"
            }
          },
          "command": {
            "type": "string",
            "description": "The command used to start the plugin. The executable defined in this command must exist in vault's plugin directory."
          },
          "env": {
            "type": "array",
            "description": "The environment variables passed to plugin command. Each entry is of the form \"key=value\".",
            "items": {
              "type": "string"
            }
          },
          "oci_image": {
            "type": "string"
          },
          "runtime": {
            "type": "string",
            "description": "The Vault plugin runtime to use when running the plugin."
          },
          "sha256": {
            "type": "string",
            "description": "The SHA256 sum of the executable or container to be run. This should be HEX encoded."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          }
        }
      },
      "PluginsCatalogRegisterPluginWithTypeRequest": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "description": "The args passed to plugin command.",
            "items": {
              "type": "string"
            }
          },
          "command": {
            "type": "string",
            "description": "The command used to start the plugin. The executable defined in this command must exist in vault's plugin directory."
          },
          "env": {
            "type": "array",
            "description": "The environment variables passed to plugin command. Each entry is of the form \"key=value\".",
            "items": {
              "type": "string"
            }
          },
          "oci_image": {
            "type": "string"
          },
          "runtime": {
            "type": "string",
            "description": "The Vault plugin runtime to use when running the plugin."
          },
          "sha256": {
            "type": "string",
            "description": "The SHA256 sum of the executable or container to be run. This should be HEX encoded."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
          }
        }
      },
      "PluginsReloadBackendsRequest": {
        "type": "object",
        "properties": {
          "mounts": {
            "type": "array",
            "description": "The mount paths of the plugin backends to reload.",
            "items": {
              "type": "string"
            }
          },
          "plugin": {
            "type": "string",
            "description": "The name of the plugin to reload, as registered in the plugin catalog."
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "PluginsReloadBackendsResponse": {
        "type": "object",
        "properties": {
          "reload_id": {
            "type": "string"
          }
        }
      },
      "PluginsRuntimesCatalogListPluginsRuntimesResponse": {
        "type": "object",
        "properties": {
          "runtimes": {
            "type": "array",
            "description": "List of all plugin runtimes in the catalog",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "PluginsRuntimesCatalogReadPluginRuntimeConfigurationResponse": {
        "type": "object",
        "properties": {
          "cgroup_parent": {
            "type": "string",
            "description": "Parent cgroup to set for each container. This can be used to control the total resource usage for a group of plugins."
          },
          "cpu_nanos": {
            "type": "integer",
            "description": "CPU limit to set per container in nanos. Defaults to no limit.",
            "format": "int64"
          },
          "memory_bytes": {
            "type": "integer",
            "description": "Memory limit to set per container in bytes. Defaults to no limit.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of the plugin runtime"
          },
          "oci_runtime": {
            "type": "string",
            "description": "The OCI-compatible runtime (default \"runsc\")"
          },
          "type": {
            "type": "string",
            "description": "The type of the plugin runtime"
          }
        }
      },
      "PluginsRuntimesCatalogRegisterPluginRuntimeRequest": {
        "type": "object",
        "properties": {
          "cgroup_parent": {
            "type": "string",
            "description": "Parent cgroup to set for each container. This can be used to control the total resource usage for a group of plugins."
          },
          "cpu_nanos": {
            "type": "integer",
            "description": "CPU limit to set per container in nanos. Defaults to no limit.",
            "format": "int64"
          },
          "memory_bytes": {
            "type": "integer",
            "description": "Memory limit to set per container in bytes. Defaults to no limit.",
            "format": "int64"
          },
          "oci_runtime": {
            "type": "string",
            "description": "The OCI-compatible runtime (default \"runsc\")"
          }
        }
      },
      "PoliciesGeneratePasswordFromPasswordPolicyResponse": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "PoliciesListAclPolicies2Response": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PoliciesListAclPolicies3Response": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PoliciesListAclPoliciesResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PoliciesReadAclPolicy2Response": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "policy": {
            "type": "string"
          },
          "rules": {
            "type": "string"
          }
        }
      },
      "PoliciesReadAclPolicyResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "policy": {
            "type": "string"
          },
          "rules": {
            "type": "string"
          }
        }
      },
      "PoliciesReadPasswordPolicyResponse": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "string"
          }
        }
      },
      "PoliciesWriteAclPolicy2Request": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "The rules of the policy."
          },
          "rules": {
            "type": "string",
            "description": "The rules of the policy.",
            "deprecated": true
          }
        }
      },
      "PoliciesWriteAclPolicyRequest": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "The rules of the policy."
          }
        }
      },
      "PoliciesWritePasswordPolicyRequest": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "The password policy"
          }
        }
      },
      "QueryTokenAccessorCapabilitiesRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token for which capabilities are being queried."
          },
          "path": {
            "type": "array",
            "description": "Use 'paths' instead.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "paths": {
            "type": "array",
            "description": "Paths on which capabilities are being queried.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QueryTokenCapabilitiesRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "array",
            "description": "Use 'paths' instead.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "paths": {
            "type": "array",
            "description": "Paths on which capabilities are being queried.",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string",
            "description": "Token for which capabilities are being queried."
          }
        }
      },
      "QueryTokenSelfCapabilitiesRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "array",
            "description": "Use 'paths' instead.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "paths": {
            "type": "array",
            "description": "Paths on which capabilities are being queried.",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string",
            "description": "Token for which capabilities are being queried."
          }
        }
      },
      "RateLimitQuotasConfigureRequest": {
        "type": "object",
        "properties": {
          "enable_rate_limit_audit_logging": {
            "type": "boolean",
            "description": "If set, starts audit logging of requests that get rejected due to rate limit quota rule violations."
          },
          "enable_rate_limit_response_headers": {
            "type": "boolean",
            "description": "If set, additional rate limit quota HTTP headers will be added to responses."
          },
          "rate_limit_exempt_paths": {
            "type": "array",
            "description": "Specifies the list of exempt paths from all rate limit quotas. If empty no paths will be exempt.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RateLimitQuotasReadConfigurationResponse": {
        "type": "object",
        "properties": {
          "enable_rate_limit_audit_logging": {
            "type": "boolean"
          },
          "enable_rate_limit_response_headers": {
            "type": "boolean"
          },
          "rate_limit_exempt_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RateLimitQuotasReadResponse": {
        "type": "object",
        "properties": {
          "block_interval": {
            "type": "integer"
          },
          "inheritable": {
            "type": "boolean"
          },
          "interval": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "format": "float"
          },
          "role": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RateLimitQuotasWriteRequest": {
        "type": "object",
        "properties": {
          "block_interval": {
            "type": "string",
            "description": "If set, when a client reaches a rate limit threshold, the client will be prohibited from any further requests until after the 'block_interval' has elapsed.",
            "format": "duration"
          },
          "inheritable": {
            "type": "boolean",
            "description": "Whether all child namespaces can inherit this namespace quota."
          },
          "interval": {
            "type": "string",
            "description": "The duration to enforce rate limiting for (default '1s').",
            "format": "duration"
          },
          "path": {
            "type": "string",
            "description": "Path of the mount or namespace to apply the quota. A blank path configures a global quota. For example namespace1/ adds a quota to a full namespace, namespace1/auth/userpass adds a quota to userpass in namespace1."
          },
          "rate": {
            "type": "number",
            "description": "The maximum number of requests in a given interval to be allowed by the quota rule. The 'rate' must be positive.",
            "format": "float"
          },
          "role": {
            "type": "string",
            "description": "Login role to apply this quota to. Note that when set, path must be configured to a valid auth method with a concept of roles."
          },
          "type": {
            "type": "string",
            "description": "Type of the quota rule."
          }
        }
      },
      "RawReadResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "RawWriteRequest": {
        "type": "object",
        "properties": {
          "compressed": {
            "type": "boolean"
          },
          "compression_type": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ReadWrappingProperties2Response": {
        "type": "object",
        "properties": {
          "creation_path": {
            "type": "string"
          },
          "creation_time": {
            "type": "string",
            "format": "date-time"
          },
          "creation_ttl": {
            "type": "string",
            "format": "duration"
          }
        }
      },
      "ReadWrappingPropertiesRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ReadWrappingPropertiesResponse": {
        "type": "object",
        "properties": {
          "creation_path": {
            "type": "string"
          },
          "creation_time": {
            "type": "string",
            "format": "date-time"
          },
          "creation_ttl": {
            "type": "string",
            "format": "duration"
          }
        }
      },
      "RekeyAttemptInitializeRequest": {
        "type": "object",
        "properties": {
          "backup": {
            "type": "boolean",
            "description": "Specifies if using PGP-encrypted keys, whether Vault should also store a plaintext backup of the PGP-encrypted keys."
          },
          "pgp_keys": {
            "type": "array",
            "description": "Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as secret_shares.",
            "items": {
              "type": "string"
            }
          },
          "require_verification": {
            "type": "boolean",
            "description": "Turns on verification functionality"
          },
          "secret_shares": {
            "type": "integer",
            "description": "Specifies the number of shares to split the unseal key into."
          },
          "secret_threshold": {
            "type": "integer",
            "description": "Specifies the number of shares required to reconstruct the unseal key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as secret_shares."
          }
        }
      },
      "RekeyAttemptInitializeResponse": {
        "type": "object",
        "properties": {
          "backup": {
            "type": "boolean"
          },
          "n": {
            "type": "integer"
          },
          "nounce": {
            "type": "string"
          },
          "pgp_fingerprints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          },
          "verification_nonce": {
            "type": "string"
          },
          "verification_required": {
            "type": "boolean"
          }
        }
      },
      "RekeyAttemptReadProgressResponse": {
        "type": "object",
        "properties": {
          "backup": {
            "type": "boolean"
          },
          "n": {
            "type": "integer"
          },
          "nounce": {
            "type": "string"
          },
          "pgp_fingerprints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          },
          "verification_nonce": {
            "type": "string"
          },
          "verification_required": {
            "type": "boolean"
          }
        }
      },
      "RekeyAttemptUpdateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Specifies a single unseal key share."
          },
          "nonce": {
            "type": "string",
            "description": "Specifies the nonce of the rekey attempt."
          }
        }
      },
      "RekeyAttemptUpdateResponse": {
        "type": "object",
        "properties": {
          "backup": {
            "type": "boolean"
          },
          "complete": {
            "type": "boolean"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keys_base64": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "n": {
            "type": "integer"
          },
          "nounce": {
            "type": "string"
          },
          "pgp_fingerprints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          },
          "verification_nonce": {
            "type": "string"
          },
          "verification_required": {
            "type": "boolean"
          }
        }
      },
      "RekeyReadBackupKeyResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "object",
            "format": "map"
          },
          "keys_base64": {
            "type": "object",
            "format": "map"
          },
          "nonce": {
            "type": "string"
          }
        }
      },
      "RekeyReadBackupRecoveryKeyResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "object",
            "format": "map"
          },
          "keys_base64": {
            "type": "object",
            "format": "map"
          },
          "nonce": {
            "type": "string"
          }
        }
      },
      "RekeyVerificationCancelResponse": {
        "type": "object",
        "properties": {
          "n": {
            "type": "integer"
          },
          "nounce": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "started": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          }
        }
      },
      "RekeyVerificationReadProgressResponse": {
        "type": "object",
        "properties": {
          "n": {
            "type": "integer"
          },
          "nounce": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "started": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          }
        }
      },
      "RekeyVerificationUpdateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Specifies a single unseal share key from the new set of shares."
          },
          "nonce": {
            "type": "string",
            "description": "Specifies the nonce of the rekey verification operation."
          }
        }
      },
      "RekeyVerificationUpdateResponse": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "nounce": {
            "type": "string"
          }
        }
      },
      "RemountRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The previous mount point."
          },
          "to": {
            "type": "string",
            "description": "The new mount point."
          }
        }
      },
      "RemountResponse": {
        "type": "object",
        "properties": {
          "migration_id": {
            "type": "string"
          }
        }
      },
      "RemountStatusResponse": {
        "type": "object",
        "properties": {
          "migration_id": {
            "type": "string"
          },
          "migration_info": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "RewrapRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "RootTokenGenerationInitialize2Request": {
        "type": "object",
        "properties": {
          "pgp_key": {
            "type": "string",
            "description": "Specifies a base64-encoded PGP public key."
          }
        }
      },
      "RootTokenGenerationInitialize2Response": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "encoded_root_token": {
            "type": "string"
          },
          "encoded_token": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "otp_length": {
            "type": "integer"
          },
          "pgp_fingerprint": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "boolean"
          }
        }
      },
      "RootTokenGenerationInitializeRequest": {
        "type": "object",
        "properties": {
          "pgp_key": {
            "type": "string",
            "description": "Specifies a base64-encoded PGP public key."
          }
        }
      },
      "RootTokenGenerationInitializeResponse": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "encoded_root_token": {
            "type": "string"
          },
          "encoded_token": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "otp_length": {
            "type": "integer"
          },
          "pgp_fingerprint": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "boolean"
          }
        }
      },
      "RootTokenGenerationReadProgress2Response": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "encoded_root_token": {
            "type": "string"
          },
          "encoded_token": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "otp_length": {
            "type": "integer"
          },
          "pgp_fingerprint": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "boolean"
          }
        }
      },
      "RootTokenGenerationReadProgressResponse": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "encoded_root_token": {
            "type": "string"
          },
          "encoded_token": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "otp_length": {
            "type": "integer"
          },
          "pgp_fingerprint": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "boolean"
          }
        }
      },
      "RootTokenGenerationUpdateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Specifies a single unseal key share."
          },
          "nonce": {
            "type": "string",
            "description": "Specifies the nonce of the attempt."
          }
        }
      },
      "RootTokenGenerationUpdateResponse": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "encoded_root_token": {
            "type": "string"
          },
          "encoded_token": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "otp_length": {
            "type": "integer"
          },
          "pgp_fingerprint": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "required": {
            "type": "integer"
          },
          "started": {
            "type": "boolean"
          }
        }
      },
      "SealStatusResponse": {
        "type": "object",
        "properties": {
          "build_date": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "hcp_link_resource_ID": {
            "type": "string"
          },
          "hcp_link_status": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "migration": {
            "type": "boolean"
          },
          "n": {
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "recovery_seal": {
            "type": "boolean"
          },
          "sealed": {
            "type": "boolean"
          },
          "storage_type": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "SshConfigureCaRequest": {
        "type": "object",
        "properties": {
          "generate_signing_key": {
            "type": "boolean",
            "description": "Generate SSH key pair internally rather than use the private_key and public_key fields.",
            "default": true
          },
          "key_bits": {
            "type": "integer",
            "description": "Specifies the desired key bits when generating variable-length keys (such as when key_type=\"ssh-rsa\") or which NIST P-curve to use when key_type=\"ec\" (256, 384, or 521).",
            "default": 0
          },
          "key_type": {
            "type": "string",
            "description": "Specifies the desired key type when generating; could be a OpenSSH key type identifier (ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521, or ssh-ed25519) or an algorithm (rsa, ec, ed25519).",
            "default": "ssh-rsa"
          },
          "private_key": {
            "type": "string",
            "description": "Private half of the SSH key that will be used to sign certificates."
          },
          "public_key": {
            "type": "string",
            "description": "Public half of the SSH key that will be used to sign certificates."
          }
        }
      },
      "SshConfigureZeroAddressRequest": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "description": "[Required] Comma separated list of role names which allows credentials to be requested for any IP address. CIDR blocks previously registered under these roles will be ignored.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SshGenerateCredentialsRequest": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "[Required] IP of the remote host"
          },
          "username": {
            "type": "string",
            "description": "[Optional] Username in remote host"
          }
        }
      },
      "SshIssueCertificateRequest": {
        "type": "object",
        "properties": {
          "cert_type": {
            "type": "string",
            "description": "Type of certificate to be created; either \"user\" or \"host\".",
            "default": "user"
          },
          "critical_options": {
            "type": "object",
            "description": "Critical options that the certificate should be signed for.",
            "format": "map"
          },
          "extensions": {
            "type": "object",
            "description": "Extensions that the certificate should be signed for.",
            "format": "map"
          },
          "key_bits": {
            "type": "integer",
            "description": "Specifies the number of bits to use for the generated keys.",
            "default": 0
          },
          "key_id": {
            "type": "string",
            "description": "Key id that the created certificate should have. If not specified, the display name of the token will be used."
          },
          "key_type": {
            "type": "string",
            "description": "Specifies the desired key type; must be `rsa`, `ed25519` or `ec`",
            "default": "rsa"
          },
          "ttl": {
            "type": "string",
            "description": "The requested Time To Live for the SSH certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be later than the role max TTL.",
            "format": "duration"
          },
          "valid_principals": {
            "type": "string",
            "description": "Valid principals, either usernames or hostnames, that the certificate should be signed for."
          }
        }
      },
      "SshListRolesByIpRequest": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "[Required] IP address of remote host"
          }
        }
      },
      "SshSignCertificateRequest": {
        "type": "object",
        "properties": {
          "cert_type": {
            "type": "string",
            "description": "Type of certificate to be created; either \"user\" or \"host\".",
            "default": "user"
          },
          "critical_options": {
            "type": "object",
            "description": "Critical options that the certificate should be signed for.",
            "format": "map"
          },
          "extensions": {
            "type": "object",
            "description": "Extensions that the certificate should be signed for.",
            "format": "map"
          },
          "key_id": {
            "type": "string",
            "description": "Key id that the created certificate should have. If not specified, the display name of the token will be used."
          },
          "public_key": {
            "type": "string",
            "description": "SSH public key that should be signed."
          },
          "ttl": {
            "type": "string",
            "description": "The requested Time To Live for the SSH certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be later than the role max TTL.",
            "format": "duration"
          },
          "valid_principals": {
            "type": "string",
            "description": "Valid principals, either usernames or hostnames, that the certificate should be signed for."
          }
        }
      },
      "SshVerifyOtpRequest": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "description": "[Required] One-Time-Key that needs to be validated"
          }
        }
      },
      "SshWriteRoleRequest": {
        "type": "object",
        "properties": {
          "algorithm_signer": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512, default, or the empty string.",
            "enum": [
              "",
              "default",
              "ssh-rsa",
              "rsa-sha2-256",
              "rsa-sha2-512"
            ],
            "x-vault-displayAttrs": {
              "name": "Signing Algorithm"
            }
          },
          "allow_bare_domains": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, host certificates that are requested are allowed to use the base domains listed in \"allowed_domains\", e.g. \"example.com\". This is a separate option as in some cases this can be considered a security threat."
          },
          "allow_host_certificates": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, certificates are allowed to be signed for use as a 'host'.",
            "default": false
          },
          "allow_subdomains": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, host certificates that are requested are allowed to use subdomains of those listed in \"allowed_domains\"."
          },
          "allow_user_certificates": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, certificates are allowed to be signed for use as a 'user'.",
            "default": false
          },
          "allow_user_key_ids": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If true, users can override the key ID for a signed certificate with the \"key_id\" field. When false, the key ID will always be the token display name. The key ID is logged by the SSH server and can be useful for auditing.",
            "x-vault-displayAttrs": {
              "name": "Allow User Key IDs"
            }
          },
          "allowed_critical_options": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] A comma-separated list of critical options that certificates can have when signed. To allow any critical options, set this to an empty string."
          },
          "allowed_domains": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] If this option is not specified, client can request for a signed certificate for any valid host. If only certain domains are allowed, then this list enforces it."
          },
          "allowed_domains_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Allowed domains can be specified using identity template policies. Non-templated domains are also permitted.",
            "default": false
          },
          "allowed_extensions": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] A comma-separated list of extensions that certificates can have when signed. An empty list means that no extension overrides are allowed by an end-user; explicitly specify '*' to allow any extensions to be set."
          },
          "allowed_user_key_lengths": {
            "type": "object",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, allows the enforcement of key types and minimum key sizes to be signed.",
            "format": "map"
          },
          "allowed_users": {
            "type": "string",
            "description": "[Optional for all types] [Works differently for CA type] If this option is not specified, or is '*', client can request a credential for any valid user at the remote host, including the admin user. If only certain usernames are to be allowed, then this list enforces it. If this field is set, then credentials can only be created for default_user and usernames present in this list. Setting this option will enable all the users with access to this role to fetch credentials for all other usernames in this list. Use with caution. N.B.: with the CA type, an empty list means that no users are allowed; explicitly specify '*' to allow any user."
          },
          "allowed_users_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Allowed users can be specified using identity template policies. Non-templated users are also permitted.",
            "default": false
          },
          "cidr_list": {
            "type": "string",
            "description": "[Optional for OTP type] [Not applicable for CA type] Comma separated list of CIDR blocks for which the role is applicable for. CIDR blocks can belong to more than one role.",
            "x-vault-displayAttrs": {
              "name": "CIDR List"
            }
          },
          "default_critical_options": {
            "type": "object",
            "description": "[Not applicable for OTP type] [Optional for CA type] Critical options certificates should have if none are provided when signing. This field takes in key value pairs in JSON format. Note that these are not restricted by \"allowed_critical_options\". Defaults to none.",
            "format": "map"
          },
          "default_extensions": {
            "type": "object",
            "description": "[Not applicable for OTP type] [Optional for CA type] Extensions certificates should have if none are provided when signing. This field takes in key value pairs in JSON format. Note that these are not restricted by \"allowed_extensions\". Defaults to none.",
            "format": "map"
          },
          "default_extensions_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Default extension values can be specified using identity template policies. Non-templated extension values are also permitted.",
            "default": false
          },
          "default_user": {
            "type": "string",
            "description": "[Required for OTP type] [Optional for CA type] Default username for which a credential will be generated. When the endpoint 'creds/' is used without a username, this value will be used as default username.",
            "x-vault-displayAttrs": {
              "name": "Default Username"
            }
          },
          "default_user_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Default user can be specified using identity template policies. Non-templated users are also permitted.",
            "default": false
          },
          "exclude_cidr_list": {
            "type": "string",
            "description": "[Optional for OTP type] [Not applicable for CA type] Comma separated list of CIDR blocks. IP addresses belonging to these blocks are not accepted by the role. This is particularly useful when big CIDR blocks are being used by the role and certain parts of it needs to be kept out.",
            "x-vault-displayAttrs": {
              "name": "Exclude CIDR List"
            }
          },
          "key_id_format": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] When supplied, this value specifies a custom format for the key id of a signed certificate. The following variables are available for use: '{{token_display_name}}' - The display name of the token used to make the request. '{{role_name}}' - The name of the role signing the request. '{{public_key_hash}}' - A SHA256 checksum of the public key that is being signed.",
            "x-vault-displayAttrs": {
              "name": "Key ID Format"
            }
          },
          "key_type": {
            "type": "string",
            "description": "[Required for all types] Type of key used to login to hosts. It can be either 'otp' or 'ca'. 'otp' type requires agent to be installed in remote hosts.",
            "enum": [
              "otp",
              "ca"
            ],
            "x-vault-displayAttrs": {
              "value": "ca"
            }
          },
          "max_ttl": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] The maximum allowed lease duration",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Max TTL"
            }
          },
          "not_before_duration": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] The duration that the SSH certificate should be backdated by at issuance.",
            "format": "duration",
            "default": 30,
            "x-vault-displayAttrs": {
              "name": "Not before duration",
              "value": 30
            }
          },
          "port": {
            "type": "integer",
            "description": "[Optional for OTP type] [Not applicable for CA type] Port number for SSH connection. Default is '22'. Port number does not play any role in creation of OTP. For 'otp' type, this is just a way to inform client about the port number to use. Port number will be returned to client by Vault server along with OTP.",
            "x-vault-displayAttrs": {
              "value": 22
            }
          },
          "ttl": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] The lease duration if no specific lease duration is requested. The lease duration controls the expiration of certificates issued by this backend. Defaults to the value of max_ttl.",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          }
        }
      },
      "StandardListResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TokenCreateAgainstRoleRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Name to associate with this token"
          },
          "entity_alias": {
            "type": "string",
            "description": "Name of the entity alias to associate with this token"
          },
          "explicit_max_ttl": {
            "type": "string",
            "description": "Explicit Max TTL of this token"
          },
          "id": {
            "type": "string",
            "description": "Value for the token"
          },
          "lease": {
            "type": "string",
            "description": "Use 'ttl' instead",
            "deprecated": true
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key=value metadata to associate with the token",
            "format": "kvpairs"
          },
          "no_default_policy": {
            "type": "boolean",
            "description": "Do not include default policy for this token"
          },
          "no_parent": {
            "type": "boolean",
            "description": "Create the token with no parent"
          },
          "num_uses": {
            "type": "integer",
            "description": "Max number of uses for this token"
          },
          "period": {
            "type": "string",
            "description": "Renew period"
          },
          "policies": {
            "type": "array",
            "description": "List of policies for the token",
            "items": {
              "type": "string"
            }
          },
          "renewable": {
            "type": "boolean",
            "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL",
            "default": true
          },
          "ttl": {
            "type": "string",
            "description": "Time to live for this token"
          },
          "type": {
            "type": "string",
            "description": "Token type"
          }
        }
      },
      "TokenCreateOrphanRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Name to associate with this token"
          },
          "entity_alias": {
            "type": "string",
            "description": "Name of the entity alias to associate with this token"
          },
          "explicit_max_ttl": {
            "type": "string",
            "description": "Explicit Max TTL of this token"
          },
          "id": {
            "type": "string",
            "description": "Value for the token"
          },
          "lease": {
            "type": "string",
            "description": "Use 'ttl' instead",
            "deprecated": true
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key=value metadata to associate with the token",
            "format": "kvpairs"
          },
          "no_default_policy": {
            "type": "boolean",
            "description": "Do not include default policy for this token"
          },
          "no_parent": {
            "type": "boolean",
            "description": "Create the token with no parent"
          },
          "num_uses": {
            "type": "integer",
            "description": "Max number of uses for this token"
          },
          "period": {
            "type": "string",
            "description": "Renew period"
          },
          "policies": {
            "type": "array",
            "description": "List of policies for the token",
            "items": {
              "type": "string"
            }
          },
          "renewable": {
            "type": "boolean",
            "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL",
            "default": true
          },
          "ttl": {
            "type": "string",
            "description": "Time to live for this token"
          },
          "type": {
            "type": "string",
            "description": "Token type"
          }
        }
      },
      "TokenCreateRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Name to associate with this token"
          },
          "entity_alias": {
            "type": "string",
            "description": "Name of the entity alias to associate with this token"
          },
          "explicit_max_ttl": {
            "type": "string",
            "description": "Explicit Max TTL of this token"
          },
          "id": {
            "type": "string",
            "description": "Value for the token"
          },
          "lease": {
            "type": "string",
            "description": "Use 'ttl' instead",
            "deprecated": true
          },
          "meta": {
            "type": "object",
            "description": "Arbitrary key=value metadata to associate with the token",
            "format": "kvpairs"
          },
          "no_default_policy": {
            "type": "boolean",
            "description": "Do not include default policy for this token"
          },
          "no_parent": {
            "type": "boolean",
            "description": "Create the token with no parent"
          },
          "num_uses": {
            "type": "integer",
            "description": "Max number of uses for this token"
          },
          "period": {
            "type": "string",
            "description": "Renew period"
          },
          "policies": {
            "type": "array",
            "description": "List of policies for the token",
            "items": {
              "type": "string"
            }
          },
          "renewable": {
            "type": "boolean",
            "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL",
            "default": true
          },
          "ttl": {
            "type": "string",
            "description": "Time to live for this token"
          },
          "type": {
            "type": "string",
            "description": "Token type"
          }
        }
      },
      "TokenLookUpAccessorRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token to look up (request body)"
          }
        }
      },
      "TokenLookUpRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to lookup"
          }
        }
      },
      "TokenLookUpSelf2Request": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to look up (unused, does not need to be set)"
          }
        }
      },
      "TokenRenewAccessorRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token to renew (request body)"
          },
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the token expiration",
            "format": "duration",
            "default": 0
          }
        }
      },
      "TokenRenewRequest": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the token expiration",
            "format": "duration",
            "default": 0
          },
          "token": {
            "type": "string",
            "description": "Token to renew (request body)"
          }
        }
      },
      "TokenRenewSelfRequest": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "string",
            "description": "The desired increment in seconds to the token expiration",
            "format": "duration",
            "default": 0
          },
          "token": {
            "type": "string",
            "description": "Token to renew (unused, does not need to be set)"
          }
        }
      },
      "TokenRevokeAccessorRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token (request body)"
          }
        }
      },
      "TokenRevokeOrphanRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to revoke (request body)"
          }
        }
      },
      "TokenRevokeRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to revoke (request body)"
          }
        }
      },
      "TokenWriteRoleRequest": {
        "type": "object",
        "properties": {
          "allowed_entity_aliases": {
            "type": "array",
            "description": "String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing.",
            "items": {
              "type": "string"
            }
          },
          "allowed_policies": {
            "type": "array",
            "description": "If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names.",
            "items": {
              "type": "string"
            }
          },
          "allowed_policies_glob": {
            "type": "array",
            "description": "If set, tokens can be created with any subset of glob matched policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy name globs.",
            "items": {
              "type": "string"
            }
          },
          "bound_cidrs": {
            "type": "array",
            "description": "Use 'token_bound_cidrs' instead.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "disallowed_policies": {
            "type": "array",
            "description": "If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names.",
            "items": {
              "type": "string"
            }
          },
          "disallowed_policies_glob": {
            "type": "array",
            "description": "If set, successful token creation via this role will require that no requested policies glob match any of policies in this list. The parameter is a comma-delimited string of policy name globs.",
            "items": {
              "type": "string"
            }
          },
          "explicit_max_ttl": {
            "type": "string",
            "description": "Use 'token_explicit_max_ttl' instead.",
            "format": "duration",
            "deprecated": true
          },
          "orphan": {
            "type": "boolean",
            "description": "If true, tokens created via this role will be orphan tokens (have no parent)"
          },
          "path_suffix": {
            "type": "string",
            "description": "If set, tokens created via this role will contain the given suffix as a part of their path. This can be used to assist use of the 'revoke-prefix' endpoint later on. The given suffix must match the regular expression.\\w[\\w-.]+\\w"
          },
          "period": {
            "type": "string",
            "description": "Use 'token_period' instead.",
            "format": "duration",
            "deprecated": true
          },
          "renewable": {
            "type": "boolean",
            "description": "Tokens created via this role will be renewable or not according to this value. Defaults to \"true\".",
            "default": true
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "description": "A list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "string",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "string",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "duration",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          }
        }
      },
      "UiHeadersConfigureRequest": {
        "type": "object",
        "properties": {
          "multivalue": {
            "type": "boolean",
            "description": "Returns multiple values if true"
          },
          "values": {
            "type": "array",
            "description": "The values to set the header.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UiHeadersListResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "description": "Lists of configured UI headers. Omitted if list is empty",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UiHeadersReadConfigurationResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "returns the first header value when `multivalue` request parameter is false"
          },
          "values": {
            "type": "array",
            "description": "returns all header values when `multivalue` request parameter is true",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UnsealRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Specifies a single unseal key share. This is required unless reset is true."
          },
          "reset": {
            "type": "boolean",
            "description": "Specifies if previously-provided unseal keys are discarded and the unseal process is reset."
          }
        }
      },
      "UnsealResponse": {
        "type": "object",
        "properties": {
          "build_date": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "hcp_link_resource_ID": {
            "type": "string"
          },
          "hcp_link_status": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "migration": {
            "type": "boolean"
          },
          "n": {
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "progress": {
            "type": "integer"
          },
          "recovery_seal": {
            "type": "boolean"
          },
          "sealed": {
            "type": "boolean"
          },
          "storage_type": {
            "type": "string"
          },
          "t": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "UnwrapRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "VersionHistoryResponse": {
        "type": "object",
        "properties": {
          "key_info": {
            "type": "object",
            "format": "kvpairs"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}